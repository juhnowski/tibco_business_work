<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns="http://www.tibco.com/namespaces/tnt/plugins/json" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <pd:name>Processes/Client/Search Client (without procedure).process</pd:name>
    <pd:startName>Start</pd:startName>
    <pd:startType>
        <xsd:element name="inputParams">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element name="adLogin" type="xsd:string"/>
                    <xsd:element name="inputJSON" type="xsd:string"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:startType>
    <pd:startX>87</pd:startX>
    <pd:startY>63</pd:startY>
    <pd:returnBindings>
        <JSONoutput>
            <xsl:value-of select="if (count($Catch/exceptiondata)>0) then $Render-error-JSON/ns:ActivityOutputClass/jsonString  else &#xA;if (count($Render-JSON-error/ns:ActivityOutputClass/jsonString)>0) then $Render-JSON-error/ns:ActivityOutputClass/jsonString  else &#xA;$Render-JSON/ns:ActivityOutputClass/jsonString"/>
        </JSONoutput>
    </pd:returnBindings>
    <pd:endName>End</pd:endName>
    <pd:endType>
        <xsd:element name="JSONoutput" type="xsd:string"/>
    </pd:endType>
    <pd:endX>1044</pd:endX>
    <pd:endY>183</pd:endY>
    <pd:errorSchemas/>
    <pd:processVariables/>
    <pd:targetNamespace>http://xmlns.example.com/1521575913877</pd:targetNamespace>
    <pd:activity name="Render JSON">
        <pd:type>com.tibco.plugin.json.activities.JSONRenderActivity</pd:type>
        <pd:resourceType>ae.activities.JSONRenderActivity</pd:resourceType>
        <pd:x>894</pd:x>
        <pd:y>181</pd:y>
        <config>
            <SchemaType>xsdType</SchemaType>
            <BadgerfishCheck>false</BadgerfishCheck>
            <removeRootElementForInput>true</removeRootElementForInput>
            <ActivityInputEditor>
                <xsd:element name="inputParams">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="currentPage" type="xsd:string"/>
                            <xsd:element name="pageSize" type="xsd:string"/>
                            <xsd:element name="lastPage" type="xsd:int"/>
                            <xsd:element name="lastRecord" type="xsd:long"/>
                            <xsd:element name="clients" minOccurs="0" maxOccurs="unbounded">
                                <xsd:complexType>
                                    <xsd:sequence>
                                        <xsd:element name="clientID" type="xsd:long" minOccurs="0"/>
                                        <xsd:element name="clientName" type="xsd:string" minOccurs="0"/>
                                        <xsd:element name="inn" type="xsd:string" minOccurs="0"/>
                                        <xsd:element name="emp" type="xsd:string" minOccurs="0"/>
                                        <xsd:element name="contractList" type="xsd:string"/>
                                    </xsd:sequence>
                                </xsd:complexType>
                            </xsd:element>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </ActivityInputEditor>
        </config>
        <pd:inputBindings>
            <ns:ActivityInputClass>
                <inputParams>
                    <currentPage>
                        <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/currentPage"/>
                    </currentPage>
                    <pageSize>
                        <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/pageSize"/>
                    </pageSize>
                    <lastPage>
                        <xsl:value-of select="ceiling($Count-customers/resultSet/Record[1]/OutputColumn1 div $Parse-JSON/ns:ActivityOutputClass/Client/pageSize)"/>
                    </lastPage>
                    <lastRecord>
                        <xsl:value-of select="$Count-customers/resultSet/Record[1]/OutputColumn1"/>
                    </lastRecord>
                    <xsl:for-each select="$Select-customers/resultSet/Record">
                        <clients>
                            <xsl:if test="id">
                                <clientID>
                                    <xsl:value-of select="id"/>
                                </clientID>
                            </xsl:if>
                            <xsl:if test="name">
                                <clientName>
                                    <xsl:value-of select="name"/>
                                </clientName>
                            </xsl:if>
                            <xsl:if test="inn">
                                <inn>
                                    <xsl:value-of select="inn"/>
                                </inn>
                            </xsl:if>
                            <xsl:if test="emp">
                                <emp>
                                    <xsl:value-of select="emp"/>
                                </emp>
                            </xsl:if>
                            <contractList>
                                <xsl:value-of select="contractList"/>
                            </contractList>
                        </clients>
                    </xsl:for-each>
                </inputParams>
            </ns:ActivityInputClass>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Parse JSON">
        <pd:type>com.tibco.plugin.json.activities.JSONParserActivity</pd:type>
        <pd:resourceType>ae.activities.JSONParserActivity</pd:resourceType>
        <pd:x>86</pd:x>
        <pd:y>179</pd:y>
        <config>
            <SchemaType>xsdType</SchemaType>
            <BadgerfishCheck>false</BadgerfishCheck>
            <ActivityOutputEditor>
                <xsd:element name="Client">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="mainSearch" type="xsd:string" minOccurs="0"/>
                            <xsd:element name="searchType" type="xsd:int" minOccurs="0"/>
                            <xsd:element name="addressSearch" type="xsd:string" minOccurs="0"/>
                            <xsd:element name="contactSearch" type="xsd:string" minOccurs="0"/>
                            <xsd:element name="bidSearch" type="xsd:string" minOccurs="0"/>
                            <xsd:element name="clientType" type="xsd:int" minOccurs="0"/>
                            <xsd:element name="pageSize" type="xsd:int"/>
                            <xsd:element name="currentPage" type="xsd:int"/>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </ActivityOutputEditor>
        </config>
        <pd:inputBindings>
            <ns:ActivityInputClass>
                <jsonString>
                    <xsl:value-of select="$Start/inputParams/inputJSON"/>
                </jsonString>
            </ns:ActivityInputClass>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Catch">
        <pd:type>com.tibco.pe.core.CatchActivity</pd:type>
        <pd:resourceType>ae.activities.catch</pd:resourceType>
        <pd:x>765</pd:x>
        <pd:y>336</pd:y>
        <pd:handler>true</pd:handler>
        <config>
            <catchAll>true</catchAll>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="Render error JSON">
        <pd:type>com.tibco.plugin.json.activities.JSONRenderActivity</pd:type>
        <pd:resourceType>ae.activities.JSONRenderActivity</pd:resourceType>
        <pd:x>895</pd:x>
        <pd:y>276</pd:y>
        <config>
            <SchemaType>xsdType</SchemaType>
            <BadgerfishCheck>false</BadgerfishCheck>
            <removeRootElementForInput>true</removeRootElementForInput>
            <ActivityInputEditor>
                <xsd:element name="inputParams">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="opResult" type="xsd:int"/>
                            <xsd:element name="opErrorText" type="xsd:string"/>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </ActivityInputEditor>
        </config>
        <pd:inputBindings>
            <ns:ActivityInputClass>
                <inputParams>
                    <opResult>
                        <xsl:value-of select="2"/>
                    </opResult>
                    <opErrorText>
                        <xsl:value-of select="$Catch/exceptiondata/*"/>
                    </opErrorText>
                </inputParams>
            </ns:ActivityInputClass>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Render-JSON-error">
        <pd:type>com.tibco.plugin.json.activities.JSONRenderActivity</pd:type>
        <pd:resourceType>ae.activities.JSONRenderActivity</pd:resourceType>
        <pd:x>579</pd:x>
        <pd:y>35</pd:y>
        <config>
            <SchemaType>xsdType</SchemaType>
            <BadgerfishCheck>false</BadgerfishCheck>
            <removeRootElementForInput>true</removeRootElementForInput>
            <ActivityInputEditor>
                <xsd:element name="output">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="opResult" type="xsd:int"/>
                            <xsd:element name="opErrorText" type="xsd:string"/>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </ActivityInputEditor>
        </config>
        <pd:inputBindings>
            <ns:ActivityInputClass>
                <output>
                    <opResult>
                        <xsl:value-of select="1"/>
                    </opResult>
                    <opErrorText>
                        <xsl:value-of select="if (string-length($Start/inputParams/adLogin)>0) then 'Не найден сотрудник или роль пользователя.' else &#xA; 'Не указан логин пользователя.'"/>
                    </opErrorText>
                </output>
            </ns:ActivityInputClass>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Select user params">
        <pd:type>com.tibco.plugin.jdbc.JDBCQueryActivity</pd:type>
        <pd:resourceType>ae.activities.JDBCQueryActivity</pd:resourceType>
        <pd:x>338</pd:x>
        <pd:y>176</pd:y>
        <config>
            <timeout>%%Timeout%%</timeout>
            <commit>false</commit>
            <maxRows>1</maxRows>
            <emptyStrAsNil>false</emptyStrAsNil>
            <jdbcSharedConfig>/Connection/MSSQL Connection (SF).sharedjdbc</jdbcSharedConfig>
            <statement>	select  cast(u.SFEmployeeID as int)  as employeeId, ur.RoleID as roleId, isnull(inco.aCRMBranch, '') as empBranch from crmdemo_ed.mrm.Users u
	inner join crmdemo_ed.dbo.Employee emp on emp.EMPLOYEE_ID = u.SFEmployeeID
	inner join crmdemo_ed.mrm.User_Role ur on u.ID = ur.UserID
	left join crmdemo_ed.dbo.SI_Internal_Company inco on emp.COMPANY_ID = inco.SI_INTERNAL_COMPANY_ID
	where u.LoginName = ?</statement>
            <wizardData/>
            <Prepared_Param_DataType>
                <parameter>
                    <parameterName>adLogin</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
            </Prepared_Param_DataType>
            <oraObjects/>
            <oraTables/>
            <QueryOutputCachedSchemaColumns>employeeId</QueryOutputCachedSchemaColumns>
            <QueryOutputCachedSchemaDataTypes>4</QueryOutputCachedSchemaDataTypes>
            <QueryOutputCachedSchemaDataTypesName>int</QueryOutputCachedSchemaDataTypesName>
            <QueryOutputCachedSchemaStatus>OptionalElement</QueryOutputCachedSchemaStatus>
            <QueryOutputCachedSchemaColumns>roleId</QueryOutputCachedSchemaColumns>
            <QueryOutputCachedSchemaDataTypes>4</QueryOutputCachedSchemaDataTypes>
            <QueryOutputCachedSchemaDataTypesName>int</QueryOutputCachedSchemaDataTypesName>
            <QueryOutputCachedSchemaStatus>RequiredElement</QueryOutputCachedSchemaStatus>
            <QueryOutputCachedSchemaColumns>empBranch</QueryOutputCachedSchemaColumns>
            <QueryOutputCachedSchemaDataTypes>12</QueryOutputCachedSchemaDataTypes>
            <QueryOutputCachedSchemaDataTypesName>varchar</QueryOutputCachedSchemaDataTypesName>
            <QueryOutputCachedSchemaStatus>RequiredElement</QueryOutputCachedSchemaStatus>
        </config>
        <pd:inputBindings>
            <jdbcQueryActivityInput>
                <adLogin>
                    <xsl:value-of select="$Start/inputParams/adLogin"/>
                </adLogin>
            </jdbcQueryActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Count customers">
        <pd:type>com.tibco.plugin.jdbc.JDBCQueryActivity</pd:type>
        <pd:resourceType>ae.activities.JDBCQueryActivity</pd:resourceType>
        <pd:x>555</pd:x>
        <pd:y>178</pd:y>
        <config>
            <timeout>%%Timeout%%</timeout>
            <commit>false</commit>
            <maxRows>100</maxRows>
            <emptyStrAsNil>false</emptyStrAsNil>
            <statement>SELECT count(*)
FROM dbo.company comp
  INNER JOIN dbo.employee emp ON comp.ACCOUNT_MANAGER_ID = emp.EMPLOYEE_ID
WHERE
  (--@mainSearch 7 times
    isnull(?, '') = ''
    OR
    (isnull(?, '') != '' AND
     (comp.COMPANY_NAME LIKE '%' + ? + '%'
      OR comp.INN LIKE '%' + ? + '%'
      OR comp.OGRN LIKE '%' + ? + '%'
      OR
      exists(SELECT 1
             FROM dbo.SI_Contract
             WHERE CUSTOMER_ID = comp.COMPANY_ID AND CONTRACT_NUMBER LIKE '%' + ? + '%')
      OR
      exists(SELECT 1
             FROM dbo.SI_ScalaNumber
             WHERE CUSTOMER_ID = comp.COMPANY_ID AND SCALA_NUMBER LIKE '%' + ? + '%')
     )
    )
  )
  AND
  (--@searchType 3 times, @emloyeeId, @searchType 1, @empBranch 2, @searchType 1, @roleId, @empBranch 2
    (? = 0 OR ? &gt; 3)
    OR
    (? = 1 AND
     exists(SELECT 1
            FROM dbo.Employee emp
            WHERE emp.EMPLOYEE_ID = ? AND emp.EMPLOYEE_ID = comp.ACCOUNT_MANAGER_ID)
    )
    OR
    (? = 2 AND comp.mrm_Branch = ? AND ? != '')
    OR
    (? = 3 AND exists(SELECT 1
                      FROM mrm.CompanyBranch_Role_Segment cbrs
                      WHERE cbrs.RoleID = ? AND cbrs.Value = 1
                            AND cbrs.CompanyBranchCode = ? AND ? != ''
                            AND isnull(cbrs.SFSegmentID, 0) = isnull(comp.Corp_Segment_Id, 0))
    )
  )
  AND
  (--@addressSearch 3
    isnull(?, '') = ''
    OR
    (isnull(?, '') != '' AND
     exists(SELECT 1
            FROM dbo.cc_address
            WHERE Customer_Id = comp.COMPANY_ID AND Long_Descriptor LIKE '%' + ? + '%')
    )
  )
  AND
  (--@contactSearch 5
    isnull(?, '') = ''
    OR
    (isnull(?, '') != '' AND
     exists(SELECT 1
            FROM dbo.Contact
            WHERE Company_Id = comp.COMPANY_ID
                  AND (rn_Descriptor LIKE '%' + ? + '%'
                       OR Phone LIKE '%' + ? + '%'
                       OR email LIKE '%' + ? + '%'
                  )
     )
    )
  )
  AND
  (--@bidSearch 4
    isnull(?, '') = ''
    OR
    (isnull(?, '') != '' AND
     (
       exists(SELECT 1
              FROM dbo.GT_Solution_Service
              WHERE Customer_Id = comp.COMPANY_ID AND OPERATION_STATUS IN (1, 3)
                    AND BILLINGID LIKE '%' + ? + '%')
       OR
       exists(SELECT 1
              FROM dbo.GT_DID did
                INNER JOIN dbo.GT_Solution_Service gss ON did.SERVICE_ID = gss.GT_SOLUTION_SERVICE_ID
              WHERE gss.Customer_Id = comp.COMPANY_ID AND did.OPERATION_STATUS IN (1, 3)
                    AND did.DID LIKE '%' + ? + '%')
     )
    )
  )
  AND
  (--@clientType 5
    ? IS NULL
    OR
    ? IS NOT NULL
    AND (
      (? &lt; 2 AND comp.Customer_Type = ?)
      OR
      (? = 2 AND comp.Customer_Type = 0
       AND comp.OrgForm_Id IN (SELECT OrgForm_Id
                               FROM CC_OrgForm
                               WHERE INTERNAL_NUMBER IN (7, 29, 30, 33, 34, 50))
      )
    )
  )</statement>
            <jdbcSharedConfig>/Connection/MSSQL Connection (SF).sharedjdbc</jdbcSharedConfig>
            <wizardData/>
            <Prepared_Param_DataType>
                <parameter>
                    <parameterName>mainSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>mainSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>mainSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>mainSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>mainSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>mainSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>mainSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>searchType</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>searchType</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>searchType</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>emloyeeId</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>searchType</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>empBranch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>empBranch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>searchType</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>roleId</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>empBranch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>empBranch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>addressSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>addressSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>addressSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>contactSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>contactSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>contactSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>contactSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>contactSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>bidSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>bidSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>bidSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>bidSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>clientType</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>clientType</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>clientType</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>clientType</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>clientType</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
            </Prepared_Param_DataType>
            <oraObjects/>
            <oraTables/>
            <QueryOutputCachedSchemaColumns>OutputColumn1</QueryOutputCachedSchemaColumns>
            <QueryOutputCachedSchemaDataTypes>4</QueryOutputCachedSchemaDataTypes>
            <QueryOutputCachedSchemaDataTypesName>int</QueryOutputCachedSchemaDataTypesName>
            <QueryOutputCachedSchemaStatus>OptionalElement</QueryOutputCachedSchemaStatus>
        </config>
        <pd:inputBindings>
            <jdbcQueryActivityInput>
                <mainSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/mainSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/mainSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </mainSearch>
                <mainSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/mainSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/mainSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </mainSearch>
                <mainSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/mainSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/mainSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </mainSearch>
                <mainSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/mainSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/mainSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </mainSearch>
                <mainSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/mainSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/mainSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </mainSearch>
                <mainSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/mainSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/mainSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </mainSearch>
                <mainSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/mainSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/mainSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </mainSearch>
                <searchType>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/searchType)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/searchType"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </searchType>
                <searchType>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/searchType)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/searchType"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </searchType>
                <searchType>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/searchType)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/searchType"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </searchType>
                <emloyeeId>
                    <xsl:choose>
                        <xsl:when test="exists($Select-user-params/resultSet/Record[1]/employeeId)">
                            <xsl:value-of select="$Select-user-params/resultSet/Record[1]/employeeId"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </emloyeeId>
                <searchType>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/searchType)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/searchType"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </searchType>
                <empBranch>
                    <xsl:choose>
                        <xsl:when test="exists($Select-user-params/resultSet/Record[1]/empBranch)">
                            <xsl:value-of select="$Select-user-params/resultSet/Record[1]/empBranch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </empBranch>
                <empBranch>
                    <xsl:value-of select="$Select-user-params/resultSet/Record[1]/empBranch"/>
                </empBranch>
                <searchType>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/searchType)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/searchType"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </searchType>
                <roleId>
                    <xsl:choose>
                        <xsl:when test="exists($Select-user-params/resultSet/Record[1]/roleId)">
                            <xsl:value-of select="$Select-user-params/resultSet/Record[1]/roleId"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </roleId>
                <empBranch>
                    <xsl:value-of select="$Select-user-params/resultSet/Record[1]/empBranch"/>
                </empBranch>
                <empBranch>
                    <xsl:value-of select="$Select-user-params/resultSet/Record[1]/empBranch"/>
                </empBranch>
                <addressSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/addressSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/addressSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </addressSearch>
                <addressSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/addressSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/addressSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </addressSearch>
                <addressSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/addressSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/addressSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </addressSearch>
                <contactSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/contactSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/contactSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </contactSearch>
                <contactSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/contactSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/contactSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </contactSearch>
                <contactSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/contactSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/contactSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </contactSearch>
                <contactSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/contactSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/contactSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </contactSearch>
                <contactSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/contactSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/contactSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </contactSearch>
                <bidSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/bidSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/bidSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </bidSearch>
                <bidSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/bidSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/bidSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </bidSearch>
                <bidSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/bidSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/bidSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </bidSearch>
                <bidSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/bidSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/bidSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </bidSearch>
                <clientType>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/clientType)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/clientType"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </clientType>
                <clientType>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/clientType)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/clientType"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </clientType>
                <clientType>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/clientType)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/clientType"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </clientType>
                <clientType>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/clientType)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/clientType"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </clientType>
                <clientType>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/clientType)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/clientType"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </clientType>
            </jdbcQueryActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Select customers">
        <pd:type>com.tibco.plugin.jdbc.JDBCQueryActivity</pd:type>
        <pd:resourceType>ae.activities.JDBCQueryActivity</pd:resourceType>
        <pd:x>712</pd:x>
        <pd:y>179</pd:y>
        <config>
            <timeout>%%Timeout%%</timeout>
            <commit>false</commit>
            <maxRows>100</maxRows>
            <emptyStrAsNil>false</emptyStrAsNil>
            <statement>SELECT
  rowNum,
  id,
  name,
  inn,
  emp,
  contractList
FROM (
       SELECT
         ROW_NUMBER()
         OVER (
           ORDER BY comp.company_id)                                           AS rowNum,
         cast(comp.COMPANY_ID AS INT)                                          AS id,
         comp.company_name                                                     AS name,
         comp.inn                                                              AS inn,
         emp.rn_descriptor                                                     AS emp,
         STUFF((SELECT TOP 3 ', ' + CONTRACT_NUMBER
                FROM SI_Contract
                WHERE
                  CUSTOMER_ID = comp.COMPANY_ID
                ORDER BY RN_CREATE_DATE DESC
                FOR XML PATH (''), TYPE).value('.', 'VARCHAR(max)'), 1, 1, '') AS contractList
       FROM dbo.company comp
         INNER JOIN dbo.employee emp ON comp.ACCOUNT_MANAGER_ID = emp.EMPLOYEE_ID
       WHERE
         (--@mainSearch 7 times
           isnull(?, '') = ''
           OR
           (isnull(?, '') != '' AND
            (comp.COMPANY_NAME LIKE '%' + ? + '%'
             OR comp.INN LIKE '%' + ? + '%'
             OR comp.OGRN LIKE '%' + ? + '%'
             OR
             exists(SELECT 1
                    FROM dbo.SI_Contract
                    WHERE CUSTOMER_ID = comp.COMPANY_ID AND CONTRACT_NUMBER LIKE '%' + ? + '%')
             OR
             exists(SELECT 1
                    FROM dbo.SI_ScalaNumber
                    WHERE CUSTOMER_ID = comp.COMPANY_ID AND SCALA_NUMBER LIKE '%' + ? + '%')
            )
           )
         )
         AND
         (--@searchType 3 times, @emloyeeId, @searchType 1, @empBranch 2, @searchType 1, @roleId, @empBranch 2
           (? = 0 OR ? &gt; 3)
           OR
           (? = 1 AND
            exists(SELECT 1
                   FROM dbo.Employee emp
                   WHERE emp.EMPLOYEE_ID = ? AND emp.EMPLOYEE_ID = comp.ACCOUNT_MANAGER_ID)
           )
           OR
           (? = 2 AND comp.mrm_Branch = ? AND ? != '')
           OR
           (? = 3 AND exists(SELECT 1
                             FROM mrm.CompanyBranch_Role_Segment cbrs
                             WHERE cbrs.RoleID = ? AND cbrs.Value = 1
                                   AND cbrs.CompanyBranchCode = ? AND ? != ''
                                   AND isnull(cbrs.SFSegmentID, 0) = isnull(comp.Corp_Segment_Id, 0))
           )
         )
         AND
         (--@addressSearch 3
           isnull(?, '') = ''
           OR
           (isnull(?, '') != '' AND
            exists(SELECT 1
                   FROM dbo.cc_address
                   WHERE Customer_Id = comp.COMPANY_ID AND Long_Descriptor LIKE '%' + ? + '%')
           )
         )
         AND
         (--@contactSearch 5
           isnull(?, '') = ''
           OR
           (isnull(?, '') != '' AND
            exists(SELECT 1
                   FROM dbo.Contact
                   WHERE Company_Id = comp.COMPANY_ID
                         AND (rn_Descriptor LIKE '%' + ? + '%'
                              OR Phone LIKE '%' + ? + '%'
                              OR email LIKE '%' + ? + '%'
                         )
            )
           )
         )
         AND
         (--@bidSearch 4
           isnull(?, '') = ''
           OR
           (isnull(?, '') != '' AND
            (
              exists(SELECT 1
                     FROM dbo.GT_Solution_Service
                     WHERE Customer_Id = comp.COMPANY_ID AND OPERATION_STATUS IN (1, 3)
                           AND BILLINGID LIKE '%' + ? + '%')
              OR
              exists(SELECT 1
                     FROM dbo.GT_DID did
                       INNER JOIN dbo.GT_Solution_Service gss ON did.SERVICE_ID = gss.GT_SOLUTION_SERVICE_ID
                     WHERE gss.Customer_Id = comp.COMPANY_ID AND did.OPERATION_STATUS IN (1, 3)
                           AND did.DID LIKE '%' + ? + '%')
            )
           )
         )
         AND
         (--@clientType 5
           ? IS NULL
           OR
           ? IS NOT NULL
           AND (
             (? &lt; 2 AND comp.Customer_Type = ?)
             OR
             (? = 2 AND comp.Customer_Type = 0
              AND comp.OrgForm_Id IN (SELECT OrgForm_Id
                                      FROM CC_OrgForm
                                      WHERE INTERNAL_NUMBER IN (7, 29, 30, 33, 34, 50))
             )
           )
         )
     ) AS Results
WHERE RowNum BETWEEN ? AND ?</statement>
            <jdbcSharedConfig>/Connection/MSSQL Connection (SF).sharedjdbc</jdbcSharedConfig>
            <wizardData/>
            <Prepared_Param_DataType>
                <parameter>
                    <parameterName>mainSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>mainSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>mainSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>mainSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>mainSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>mainSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>mainSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>searchType</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>searchType</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>searchType</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>emloyeeId</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>searchType</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>empBranch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>empBranch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>searchType</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>roleId</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>empBranch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>empBranch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>addressSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>addressSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>addressSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>contactSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>contactSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>contactSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>contactSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>contactSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>bidSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>bidSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>bidSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>bidSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>clientType</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>clientType</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>clientType</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>clientType</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>clientType</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>startRow</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>endRow</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
            </Prepared_Param_DataType>
            <oraObjects/>
            <oraTables/>
            <QueryOutputCachedSchemaColumns>rowNum</QueryOutputCachedSchemaColumns>
            <QueryOutputCachedSchemaDataTypes>-5</QueryOutputCachedSchemaDataTypes>
            <QueryOutputCachedSchemaDataTypesName>bigint</QueryOutputCachedSchemaDataTypesName>
            <QueryOutputCachedSchemaStatus>OptionalElement</QueryOutputCachedSchemaStatus>
            <QueryOutputCachedSchemaColumns>id</QueryOutputCachedSchemaColumns>
            <QueryOutputCachedSchemaDataTypes>4</QueryOutputCachedSchemaDataTypes>
            <QueryOutputCachedSchemaDataTypesName>int</QueryOutputCachedSchemaDataTypesName>
            <QueryOutputCachedSchemaStatus>OptionalElement</QueryOutputCachedSchemaStatus>
            <QueryOutputCachedSchemaColumns>name</QueryOutputCachedSchemaColumns>
            <QueryOutputCachedSchemaDataTypes>12</QueryOutputCachedSchemaDataTypes>
            <QueryOutputCachedSchemaDataTypesName>varchar</QueryOutputCachedSchemaDataTypesName>
            <QueryOutputCachedSchemaStatus>OptionalElement</QueryOutputCachedSchemaStatus>
            <QueryOutputCachedSchemaColumns>inn</QueryOutputCachedSchemaColumns>
            <QueryOutputCachedSchemaDataTypes>12</QueryOutputCachedSchemaDataTypes>
            <QueryOutputCachedSchemaDataTypesName>varchar</QueryOutputCachedSchemaDataTypesName>
            <QueryOutputCachedSchemaStatus>OptionalElement</QueryOutputCachedSchemaStatus>
            <QueryOutputCachedSchemaColumns>emp</QueryOutputCachedSchemaColumns>
            <QueryOutputCachedSchemaDataTypes>12</QueryOutputCachedSchemaDataTypes>
            <QueryOutputCachedSchemaDataTypesName>varchar</QueryOutputCachedSchemaDataTypesName>
            <QueryOutputCachedSchemaStatus>OptionalElement</QueryOutputCachedSchemaStatus>
            <QueryOutputCachedSchemaColumns>contractList</QueryOutputCachedSchemaColumns>
            <QueryOutputCachedSchemaDataTypes>12</QueryOutputCachedSchemaDataTypes>
            <QueryOutputCachedSchemaDataTypesName>varchar</QueryOutputCachedSchemaDataTypesName>
            <QueryOutputCachedSchemaStatus>OptionalElement</QueryOutputCachedSchemaStatus>
        </config>
        <pd:inputBindings>
            <jdbcQueryActivityInput>
                <mainSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/mainSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/mainSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </mainSearch>
                <mainSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/mainSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/mainSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </mainSearch>
                <mainSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/mainSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/mainSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </mainSearch>
                <mainSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/mainSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/mainSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </mainSearch>
                <mainSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/mainSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/mainSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </mainSearch>
                <mainSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/mainSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/mainSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </mainSearch>
                <mainSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/mainSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/mainSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </mainSearch>
                <searchType>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/searchType)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/searchType"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </searchType>
                <searchType>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/searchType)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/searchType"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </searchType>
                <searchType>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/searchType)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/searchType"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </searchType>
                <emloyeeId>
                    <xsl:choose>
                        <xsl:when test="exists($Select-user-params/resultSet/Record[1]/employeeId)">
                            <xsl:value-of select="$Select-user-params/resultSet/Record[1]/employeeId"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </emloyeeId>
                <searchType>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/searchType)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/searchType"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </searchType>
                <empBranch>
                    <xsl:choose>
                        <xsl:when test="exists($Select-user-params/resultSet/Record[1]/empBranch)">
                            <xsl:value-of select="$Select-user-params/resultSet/Record[1]/empBranch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </empBranch>
                <empBranch>
                    <xsl:value-of select="$Select-user-params/resultSet/Record[1]/empBranch"/>
                </empBranch>
                <searchType>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/searchType)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/searchType"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </searchType>
                <roleId>
                    <xsl:choose>
                        <xsl:when test="exists($Select-user-params/resultSet/Record[1]/roleId)">
                            <xsl:value-of select="$Select-user-params/resultSet/Record[1]/roleId"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </roleId>
                <empBranch>
                    <xsl:value-of select="$Select-user-params/resultSet/Record[1]/empBranch"/>
                </empBranch>
                <empBranch>
                    <xsl:value-of select="$Select-user-params/resultSet/Record[1]/empBranch"/>
                </empBranch>
                <addressSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/addressSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/addressSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </addressSearch>
                <addressSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/addressSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/addressSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </addressSearch>
                <addressSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/addressSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/addressSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </addressSearch>
                <contactSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/contactSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/contactSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </contactSearch>
                <contactSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/contactSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/contactSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </contactSearch>
                <contactSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/contactSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/contactSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </contactSearch>
                <contactSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/contactSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/contactSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </contactSearch>
                <contactSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/contactSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/contactSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </contactSearch>
                <bidSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/bidSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/bidSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </bidSearch>
                <bidSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/bidSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/bidSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </bidSearch>
                <bidSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/bidSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/bidSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </bidSearch>
                <bidSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/bidSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/bidSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </bidSearch>
                <clientType>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/clientType)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/clientType"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </clientType>
                <clientType>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/clientType)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/clientType"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </clientType>
                <clientType>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/clientType)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/clientType"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </clientType>
                <clientType>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/clientType)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/clientType"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </clientType>
                <clientType>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/clientType)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/clientType"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </clientType>
                <startRow>
                    <xsl:value-of select="($Parse-JSON/ns:ActivityOutputClass/Client/currentPage - 1) * $Parse-JSON/ns:ActivityOutputClass/Client/pageSize + 1"/>
                </startRow>
                <endRow>
                    <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/pageSize * $Parse-JSON/ns:ActivityOutputClass/Client/currentPage"/>
                </endRow>
            </jdbcQueryActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:transition>
        <pd:from>Start</pd:from>
        <pd:to>Parse JSON</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Render JSON</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Catch</pd:from>
        <pd:to>Render error JSON</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Render error JSON</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Parse JSON</pd:from>
        <pd:to>Render-JSON-error</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Parse JSON</pd:from>
        <pd:to>Select user params</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>string-length($Start/inputParams/adLogin) &gt; 0</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>Render-JSON-error</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Select user params</pd:from>
        <pd:to>Render-JSON-error</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Select user params</pd:from>
        <pd:to>Count customers</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>string-length($Select-user-params/resultSet/Record[1]/employeeId) &gt; 0</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>Select customers</pd:from>
        <pd:to>Render JSON</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Count customers</pd:from>
        <pd:to>Select customers</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
</pd:ProcessDefinition>