<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns="http://www.tibco.com/namespaces/tnt/plugins/json" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <pd:name>Processes/Address/Search Address (without procedure).process</pd:name>
    <pd:startName>Start</pd:startName>
    <pd:startType>
        <xsd:element name="inputParams">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element name="adLogin" type="xsd:string"/>
                    <xsd:element name="inputJSON" type="xsd:string"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:startType>
    <pd:startX>83</pd:startX>
    <pd:startY>257</pd:startY>
    <pd:returnBindings>
        <JSONoutput>
            <xsl:value-of select="if (count($Catch/exceptiondata)>0) then $Render-error-JSON/ns:ActivityOutputClass/jsonString  else&#xA;if  (count($Render-client-empty/ns:ActivityOutputClass/jsonString)>0) then  $Render-client-empty/ns:ActivityOutputClass/jsonString else&#xA;$Render-JSON-Result/ns:ActivityOutputClass/jsonString"/>
        </JSONoutput>
    </pd:returnBindings>
    <pd:endName>End</pd:endName>
    <pd:endType>
        <xsd:element name="JSONoutput" type="xsd:string"/>
    </pd:endType>
    <pd:endX>957</pd:endX>
    <pd:endY>256</pd:endY>
    <pd:errorSchemas/>
    <pd:processVariables/>
    <pd:targetNamespace>http://xmlns.example.com/1521575913877</pd:targetNamespace>
    <pd:activity name="Parse JSON">
        <pd:type>com.tibco.plugin.json.activities.JSONParserActivity</pd:type>
        <pd:resourceType>ae.activities.JSONParserActivity</pd:resourceType>
        <pd:x>265</pd:x>
        <pd:y>255</pd:y>
        <config>
            <SchemaType>xsdType</SchemaType>
            <BadgerfishCheck>false</BadgerfishCheck>
            <ActivityOutputEditor>
                <xsd:element name="Client">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="mainSearch" type="xsd:string" minOccurs="0"/>
                            <xsd:element name="clientId" type="xsd:long"/>
                            <xsd:element name="addressType" type="xsd:int"/>
                            <xsd:element name="pageSize" type="xsd:int"/>
                            <xsd:element name="currentPage" type="xsd:int"/>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </ActivityOutputEditor>
        </config>
        <pd:inputBindings>
            <ns:ActivityInputClass>
                <jsonString>
                    <xsl:value-of select="$Start/inputParams/inputJSON"/>
                </jsonString>
            </ns:ActivityInputClass>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Catch">
        <pd:type>com.tibco.pe.core.CatchActivity</pd:type>
        <pd:resourceType>ae.activities.catch</pd:resourceType>
        <pd:x>657</pd:x>
        <pd:y>393</pd:y>
        <pd:handler>true</pd:handler>
        <config>
            <catchAll>true</catchAll>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="Render error JSON">
        <pd:type>com.tibco.plugin.json.activities.JSONRenderActivity</pd:type>
        <pd:resourceType>ae.activities.JSONRenderActivity</pd:resourceType>
        <pd:x>809</pd:x>
        <pd:y>394</pd:y>
        <config>
            <SchemaType>xsdType</SchemaType>
            <BadgerfishCheck>false</BadgerfishCheck>
            <removeRootElementForInput>true</removeRootElementForInput>
            <ActivityInputEditor>
                <xsd:element name="inputParams">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="opResult" type="xsd:int"/>
                            <xsd:element name="opErrorText" type="xsd:string"/>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </ActivityInputEditor>
        </config>
        <pd:inputBindings>
            <ns:ActivityInputClass>
                <inputParams>
                    <opResult>
                        <xsl:value-of select="2"/>
                    </opResult>
                    <opErrorText>
                        <xsl:value-of select="$Catch/exceptiondata/*"/>
                    </opErrorText>
                </inputParams>
            </ns:ActivityInputClass>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Row count query">
        <pd:type>com.tibco.plugin.jdbc.JDBCQueryActivity</pd:type>
        <pd:resourceType>ae.activities.JDBCQueryActivity</pd:resourceType>
        <pd:x>424</pd:x>
        <pd:y>258</pd:y>
        <config>
            <timeout>%%Timeout%%</timeout>
            <commit>false</commit>
            <maxRows>1</maxRows>
            <emptyStrAsNil>false</emptyStrAsNil>
            <jdbcSharedConfig>/Connection/MSSQL Connection (SF).sharedjdbc</jdbcSharedConfig>
            <statement>SELECT count(*)
FROM crmdemo_ed.dbo.CC_Address addr
WHERE addr.CUSTOMER_ID =?  
        AND addr.Long_Descriptor IS NOT NULL
	AND addr.ADDRESS_TYPE = ?
	AND
				(
					isnull(?, '') = ''
					OR
					(isnull(?, '') != ''
					 AND (
						 addr.Long_Descriptor LIKE '%' + ? + '%'
					 )
					)
				)</statement>
            <wizardData/>
            <Prepared_Param_DataType>
                <parameter>
                    <parameterName>clientId</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>addressType</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>mainSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>mainSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>mainSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
            </Prepared_Param_DataType>
            <oraObjects/>
            <oraTables/>
            <QueryOutputCachedSchemaColumns>OutputColumn1</QueryOutputCachedSchemaColumns>
            <QueryOutputCachedSchemaDataTypes>4</QueryOutputCachedSchemaDataTypes>
            <QueryOutputCachedSchemaDataTypesName>int</QueryOutputCachedSchemaDataTypesName>
            <QueryOutputCachedSchemaStatus>OptionalElement</QueryOutputCachedSchemaStatus>
        </config>
        <pd:inputBindings>
            <jdbcQueryActivityInput>
                <clientId>
                    <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/clientId"/>
                </clientId>
                <addressType>
                    <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/addressType"/>
                </addressType>
                <mainSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/mainSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/mainSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </mainSearch>
                <mainSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/mainSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/mainSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </mainSearch>
                <mainSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/mainSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/mainSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </mainSearch>
            </jdbcQueryActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Render-JSON-Result">
        <pd:type>com.tibco.plugin.json.activities.JSONRenderActivity</pd:type>
        <pd:resourceType>ae.activities.JSONRenderActivity</pd:resourceType>
        <pd:x>782</pd:x>
        <pd:y>255</pd:y>
        <config>
            <SchemaType>xsdType</SchemaType>
            <BadgerfishCheck>false</BadgerfishCheck>
            <removeRootElementForInput>true</removeRootElementForInput>
            <ActivityInputEditor>
                <xsd:element name="output">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="currentPage" type="xsd:int"/>
                            <xsd:element name="pageSize" type="xsd:int"/>
                            <xsd:element name="lastPage" type="xsd:int"/>
                            <xsd:element name="lastRecord" type="xsd:int"/>
                            <xsd:element name="clientId" type="xsd:int"/>
                            <xsd:element name="addresses" minOccurs="0" maxOccurs="unbounded">
                                <xsd:complexType>
                                    <xsd:sequence>
                                        <xsd:element name="id" type="xsd:int"/>
                                        <xsd:element name="addressName" type="xsd:string"/>
                                        <xsd:element name="addressType" type="xsd:string"/>
                                    </xsd:sequence>
                                </xsd:complexType>
                            </xsd:element>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </ActivityInputEditor>
        </config>
        <pd:inputBindings>
            <ns:ActivityInputClass>
                <output>
                    <currentPage>
                        <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/currentPage"/>
                    </currentPage>
                    <pageSize>
                        <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/pageSize"/>
                    </pageSize>
                    <lastPage>
                        <xsl:value-of select="ceiling($Row-count-query/resultSet/Record[1]/OutputColumn1 div $Parse-JSON/ns:ActivityOutputClass/Client/pageSize)"/>
                    </lastPage>
                    <lastRecord>
                        <xsl:value-of select="$Row-count-query/resultSet/Record[1]/OutputColumn1"/>
                    </lastRecord>
                    <clientId>
                        <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/clientId"/>
                    </clientId>
                    <xsl:for-each select="$Data-query/resultSet/Record">
                        <addresses>
                            <id>
                                <xsl:value-of select="ID"/>
                            </id>
                            <addressName>
                                <xsl:value-of select="AddrName"/>
                            </addressName>
                            <addressType>
                                <xsl:value-of select="AddrType"/>
                            </addressType>
                        </addresses>
                    </xsl:for-each>
                </output>
            </ns:ActivityInputClass>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Data-query">
        <pd:type>com.tibco.plugin.jdbc.JDBCQueryActivity</pd:type>
        <pd:resourceType>ae.activities.JDBCQueryActivity</pd:resourceType>
        <pd:x>604</pd:x>
        <pd:y>257</pd:y>
        <config>
            <timeout>%%Timeout%%</timeout>
            <commit>false</commit>
            <maxRows>100</maxRows>
            <emptyStrAsNil>false</emptyStrAsNil>
            <jdbcSharedConfig>/Connection/MSSQL Connection (SF).sharedjdbc</jdbcSharedConfig>
            <statement>	SELECT *
	FROM (
		SELECT
			ROW_NUMBER()
			OVER (
				ORDER BY addr.Long_Descriptor) AS RowNum,
			convert(INT, addr.ADDRESS_ID)    AS ID,
			--ID адреса
			left(addr.Long_Descriptor, 255)  AS AddrName,
			--Название адреса
			CASE
			WHEN addr.ADDRESS_TYPE = 0
				THEN 'Инсталляционный'
			WHEN addr.ADDRESS_TYPE = 1
				THEN 'Биллинговый'
			WHEN addr.ADDRESS_TYPE = 2
				THEN 'Юридический'
			WHEN addr.ADDRESS_TYPE = 3
				THEN 'Почтовый'
			WHEN addr.ADDRESS_TYPE = 4
				THEN 'Фактический'
			WHEN addr.ADDRESS_TYPE = 5
				THEN 'Узел ГК'
			WHEN addr.ADDRESS_TYPE = 6
				THEN 'Бизнес Центр'
			ELSE ''
			END                              AS AddrType
		FROM crmdemo_ed.dbo.CC_Address addr
		WHERE addr.CUSTOMER_ID = ?
					AND addr.Long_Descriptor IS NOT NULL
					AND addr.ADDRESS_TYPE = ?
					AND
					(
						isnull(?, '') = ''
						OR
						(isnull(?, '') != ''
						 AND (
							 addr.Long_Descriptor LIKE '%' + ? + '%'
						 )
						)
					)
	)  AS Results
	WHERE RowNum BETWEEN ? AND ?</statement>
            <wizardData/>
            <Prepared_Param_DataType>
                <parameter>
                    <parameterName>clientId</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>addressType</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>mainSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>mainSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>mainSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>startRow</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>endRow</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
            </Prepared_Param_DataType>
            <oraObjects/>
            <oraTables/>
            <QueryOutputCachedSchemaColumns>RowNum</QueryOutputCachedSchemaColumns>
            <QueryOutputCachedSchemaDataTypes>-5</QueryOutputCachedSchemaDataTypes>
            <QueryOutputCachedSchemaDataTypesName>bigint</QueryOutputCachedSchemaDataTypesName>
            <QueryOutputCachedSchemaStatus>OptionalElement</QueryOutputCachedSchemaStatus>
            <QueryOutputCachedSchemaColumns>ID</QueryOutputCachedSchemaColumns>
            <QueryOutputCachedSchemaDataTypes>4</QueryOutputCachedSchemaDataTypes>
            <QueryOutputCachedSchemaDataTypesName>int</QueryOutputCachedSchemaDataTypesName>
            <QueryOutputCachedSchemaStatus>OptionalElement</QueryOutputCachedSchemaStatus>
            <QueryOutputCachedSchemaColumns>AddrName</QueryOutputCachedSchemaColumns>
            <QueryOutputCachedSchemaDataTypes>12</QueryOutputCachedSchemaDataTypes>
            <QueryOutputCachedSchemaDataTypesName>varchar</QueryOutputCachedSchemaDataTypesName>
            <QueryOutputCachedSchemaStatus>OptionalElement</QueryOutputCachedSchemaStatus>
            <QueryOutputCachedSchemaColumns>AddrType</QueryOutputCachedSchemaColumns>
            <QueryOutputCachedSchemaDataTypes>12</QueryOutputCachedSchemaDataTypes>
            <QueryOutputCachedSchemaDataTypesName>varchar</QueryOutputCachedSchemaDataTypesName>
            <QueryOutputCachedSchemaStatus>RequiredElement</QueryOutputCachedSchemaStatus>
        </config>
        <pd:inputBindings>
            <jdbcQueryActivityInput>
                <clientId>
                    <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/clientId"/>
                </clientId>
                <addressType>
                    <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/addressType"/>
                </addressType>
                <mainSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/mainSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/mainSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </mainSearch>
                <mainSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/mainSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/mainSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </mainSearch>
                <mainSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/mainSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/mainSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </mainSearch>
                <startRow>
                    <xsl:value-of select="($Parse-JSON/ns:ActivityOutputClass/Client/currentPage - 1) * $Parse-JSON/ns:ActivityOutputClass/Client/pageSize + 1"/>
                </startRow>
                <endRow>
                    <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/pageSize * $Parse-JSON/ns:ActivityOutputClass/Client/currentPage"/>
                </endRow>
            </jdbcQueryActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Render-client-empty">
        <pd:type>com.tibco.plugin.json.activities.JSONRenderActivity</pd:type>
        <pd:resourceType>ae.activities.JSONRenderActivity</pd:resourceType>
        <pd:x>654</pd:x>
        <pd:y>106</pd:y>
        <config>
            <SchemaType>xsdType</SchemaType>
            <BadgerfishCheck>false</BadgerfishCheck>
            <removeRootElementForInput>true</removeRootElementForInput>
            <ActivityInputEditor>
                <xsd:element name="output">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="opResult" type="xsd:int"/>
                            <xsd:element name="opErrorText" type="xsd:string"/>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </ActivityInputEditor>
        </config>
        <pd:inputBindings>
            <ns:ActivityInputClass>
                <output>
                    <opResult>
                        <xsl:value-of select="1"/>
                    </opResult>
                    <opErrorText>
                        <xsl:value-of select="'Не указан ID клиента.'"/>
                    </opErrorText>
                </output>
            </ns:ActivityInputClass>
        </pd:inputBindings>
    </pd:activity>
    <pd:transition>
        <pd:from>Start</pd:from>
        <pd:to>Parse JSON</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Catch</pd:from>
        <pd:to>Render error JSON</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Render error JSON</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Row count query</pd:from>
        <pd:to>Data-query</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Data-query</pd:from>
        <pd:to>Render-JSON-Result</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Render-JSON-Result</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Parse JSON</pd:from>
        <pd:to>Render-client-empty</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Parse JSON</pd:from>
        <pd:to>Row count query</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>string-length($Parse-JSON/ns:ActivityOutputClass/Client/clientId) &gt; 0</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>Render-client-empty</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
</pd:ProcessDefinition>