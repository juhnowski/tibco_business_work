<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns1="http://www.tibco.com/pe/GenerateErrorActivity/InputSchema" xmlns:ns="http://www.tibco.com/namespaces/tnt/plugins/json" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:tib="http://www.tibco.com/bw/xslt/custom-functions" xmlns:pfx2="http://sovintel.net/" xmlns:pfx="http://ofmservices.org/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <wsdl:import namespace="http://ofmservices.org/" location="/Connection/OFM WSDL.wsdl"/>
    <pd:name>Processes/Project/Send To Realization.process</pd:name>
    <pd:startName>Start</pd:startName>
    <pd:startType>
        <xsd:element name="inputParams">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element name="adLogin" type="xsd:string"/>
                    <xsd:element name="empNo" type="xsd:string"/>
                    <xsd:element name="inputJSON" type="xsd:string"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:startType>
    <pd:startX>51</pd:startX>
    <pd:startY>54</pd:startY>
    <pd:returnBindings>
        <JSONoutput>
            <xsl:value-of select="if (count($Catch/exceptiondata)>0) then $Render-error-JSON/ns:ActivityOutputClass/jsonString  else $Render-JSON/ns:ActivityOutputClass/jsonString"/>
        </JSONoutput>
    </pd:returnBindings>
    <pd:endName>End</pd:endName>
    <pd:endType>
        <xsd:element name="JSONoutput" type="xsd:string"/>
    </pd:endType>
    <pd:endX>1077</pd:endX>
    <pd:endY>56</pd:endY>
    <pd:errorSchemas/>
    <pd:processVariables/>
    <pd:targetNamespace>http://xmlns.example.com/1521575913877</pd:targetNamespace>
    <pd:activity name="Parse JSON">
        <pd:type>com.tibco.plugin.json.activities.JSONParserActivity</pd:type>
        <pd:resourceType>ae.activities.JSONParserActivity</pd:resourceType>
        <pd:x>56</pd:x>
        <pd:y>145</pd:y>
        <config>
            <SchemaType>xsdType</SchemaType>
            <BadgerfishCheck>false</BadgerfishCheck>
            <ActivityOutputEditor>
                <xsd:element name="inputParams">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="dealID" type="xsd:long"/>
                            <xsd:element name="plannedFinishDate" type="xsd:dateTime" minOccurs="0"/>
                            <xsd:element name="contract" minOccurs="0">
                                <xsd:complexType>
                                    <xsd:sequence>
                                        <xsd:element name="contractClientName" type="xsd:string" minOccurs="0"/>
                                        <xsd:element name="salesManagerId" type="xsd:long" minOccurs="0"/>
                                        <xsd:element name="signedDate" type="xsd:dateTime" minOccurs="0"/>
                                        <xsd:element name="operLicenseId" type="xsd:long" minOccurs="0"/>
                                        <xsd:element name="joinLevelId" type="xsd:long" minOccurs="0"/>
                                        <xsd:element name="crossClientID" type="xsd:long" minOccurs="0"/>
                                        <xsd:element name="uSFId" type="xsd:long" minOccurs="0"/>
                                        <xsd:element name="aBHId" type="xsd:long" minOccurs="0"/>
                                        <xsd:element name="contractInvoiceId" type="xsd:long" minOccurs="0"/>
                                        <xsd:element name="sendDataToExtId" type="xsd:long" minOccurs="0"/>
                                        <xsd:element name="profitID" type="xsd:long" minOccurs="0"/>
                                        <xsd:element name="setFineId" type="xsd:long" minOccurs="0"/>
                                        <xsd:element name="fineTypeId" type="xsd:long" minOccurs="0"/>
                                        <xsd:element name="fine" type="xsd:float" minOccurs="0"/>
                                        <xsd:element name="penyRFRId" type="xsd:long" minOccurs="0"/>
                                        <xsd:element name="invoicePayPeriod" type="xsd:string" minOccurs="0"/>
                                        <xsd:element name="breakDate" type="xsd:dateTime" minOccurs="0"/>
                                        <xsd:element name="breakCauseId" type="xsd:long" minOccurs="0"/>
                                        <xsd:element name="businnesUnitId" type="xsd:long" minOccurs="0"/>
                                        <xsd:element name="supplierId" type="xsd:long" minOccurs="0"/>
                                        <xsd:element name="serviceLevelId" type="xsd:long" minOccurs="0"/>
                                        <xsd:element name="agreePrivateInfoId" type="xsd:long" minOccurs="0"/>
                                        <xsd:element name="bank" type="xsd:string" minOccurs="0"/>
                                        <xsd:element name="account" type="xsd:string" minOccurs="0"/>
                                        <xsd:element name="bik" type="xsd:string" minOccurs="0"/>
                                        <xsd:element name="corrAccount" type="xsd:string" minOccurs="0"/>
                                        <xsd:element name="kpp" type="xsd:string" minOccurs="0"/>
                                        <xsd:element name="saleOfficeId" type="xsd:long" minOccurs="0"/>
                                        <xsd:element name="salePointId" type="xsd:long" minOccurs="0"/>
                                        <xsd:element name="fineWarrantNumber" type="xsd:string" minOccurs="0"/>
                                    </xsd:sequence>
                                </xsd:complexType>
                            </xsd:element>
                            <xsd:element name="scala" minOccurs="0">
                                <xsd:complexType>
                                    <xsd:sequence>
                                        <xsd:element name="nDSTariffId" type="xsd:int" minOccurs="0"/>
                                        <xsd:element name="billingCurrencyId" type="xsd:int" minOccurs="0"/>
                                        <xsd:element name="tariffsCurrencyId" type="xsd:int" minOccurs="0"/>
                                        <xsd:element name="agentCollectorId" type="xsd:int" minOccurs="0"/>
                                        <xsd:element name="govContractId" type="xsd:string" minOccurs="0"/>
                                        <xsd:element name="oppCoopLVLTPId" type="xsd:int" minOccurs="0"/>
                                        <xsd:element name="closeDate" type="xsd:dateTime" minOccurs="0"/>
                                        <xsd:element name="breakCauseId" type="xsd:int" minOccurs="0"/>
                                        <xsd:element name="billingAddressId" type="xsd:int" minOccurs="0"/>
                                        <xsd:element name="billingContactId" type="xsd:int" minOccurs="0"/>
                                        <xsd:element name="invoicePrintId" type="xsd:int" minOccurs="0"/>
                                        <xsd:element name="invoiceSendToId" type="xsd:int" minOccurs="0"/>
                                        <xsd:element name="voiceTrafDetailsId" type="xsd:int" minOccurs="0"/>
                                        <xsd:element name="emailForDetails" type="xsd:string" minOccurs="0"/>
                                        <xsd:element name="invoiceDeliveryId" type="xsd:int" minOccurs="0"/>
                                        <xsd:element name="emailInvoiceDelivery" type="xsd:string" minOccurs="0"/>
                                        <xsd:element name="showDIDALexpandedId" type="xsd:int" minOccurs="0"/>
                                        <xsd:element name="uBGId" type="xsd:int" minOccurs="0"/>
                                        <xsd:element name="billLanguageId" type="xsd:int" minOccurs="0"/>
                                        <xsd:element name="specifyConsumerId" type="xsd:int" minOccurs="0"/>
                                        <xsd:element name="ringUpPhone" type="xsd:string" minOccurs="0"/>
                                        <xsd:element name="ringUpEMail" type="xsd:string" minOccurs="0"/>
                                        <xsd:element name="digitalSignature" type="xsd:int" minOccurs="0"/>
                                        <xsd:element name="digitalSignatureDate" type="xsd:dateTime" minOccurs="0"/>
                                        <xsd:element name="digitalSignatureId" type="xsd:string" minOccurs="0"/>
                                        <xsd:element name="scalaNumberVKId" type="xsd:int" minOccurs="0"/>
                                        <xsd:element name="trafficTypeId" type="xsd:int" minOccurs="0"/>
                                    </xsd:sequence>
                                </xsd:complexType>
                            </xsd:element>
                            <xsd:element name="client" minOccurs="0">
                                <xsd:complexType>
                                    <xsd:sequence>
                                        <xsd:element name="legalAddressId" type="xsd:long" minOccurs="0"/>
                                        <xsd:element name="contactAddressId" type="xsd:long" minOccurs="0"/>
                                        <xsd:element name="carrierTypeId" type="xsd:long" minOccurs="0"/>
                                        <xsd:element name="clientSMID" type="xsd:long" minOccurs="0"/>
                                        <xsd:element name="inn" type="xsd:string" minOccurs="0"/>
                                        <xsd:element name="officialStatus" type="xsd:string" minOccurs="0"/>
                                        <xsd:element name="okvedCodeID" type="xsd:long" minOccurs="0"/>
                                        <xsd:element name="orgFormIntNum" type="xsd:long" minOccurs="0"/>
                                        <xsd:element name="segmentID" type="xsd:long" minOccurs="0"/>
                                        <xsd:element name="clientName" type="xsd:string" minOccurs="0"/>
                                    </xsd:sequence>
                                </xsd:complexType>
                            </xsd:element>
                            <xsd:element name="alwaysNull" type="xsd:int"/>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </ActivityOutputEditor>
        </config>
        <pd:inputBindings>
            <ns:ActivityInputClass>
                <jsonString>
                    <xsl:value-of select="$Start/inputParams/inputJSON"/>
                </jsonString>
            </ns:ActivityInputClass>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Catch">
        <pd:type>com.tibco.pe.core.CatchActivity</pd:type>
        <pd:resourceType>ae.activities.catch</pd:resourceType>
        <pd:x>904</pd:x>
        <pd:y>151</pd:y>
        <pd:handler>true</pd:handler>
        <config>
            <catchAll>true</catchAll>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="Render error JSON">
        <pd:type>com.tibco.plugin.json.activities.JSONRenderActivity</pd:type>
        <pd:resourceType>ae.activities.JSONRenderActivity</pd:resourceType>
        <pd:x>1077</pd:x>
        <pd:y>153</pd:y>
        <config>
            <SchemaType>xsdType</SchemaType>
            <BadgerfishCheck>false</BadgerfishCheck>
            <removeRootElementForInput>true</removeRootElementForInput>
            <ActivityInputEditor>
                <xsd:element name="inputParams">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="opResult" type="xsd:int"/>
                            <xsd:element name="opErrorText" type="xsd:string"/>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </ActivityInputEditor>
        </config>
        <pd:inputBindings>
            <ns:ActivityInputClass>
                <inputParams>
                    <opResult>
                        <xsl:value-of select="2"/>
                    </opResult>
                    <opErrorText>
                        <xsl:value-of select="$Catch/exceptiondata/*"/>
                    </opErrorText>
                </inputParams>
            </ns:ActivityInputClass>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="SOAPRequestReply">
        <pd:type>com.tibco.plugin.soap.SOAPSendReceiveActivity</pd:type>
        <pd:resourceType>ae.activities.SOAPSendReceiveUI</pd:resourceType>
        <pd:x>753</pd:x>
        <pd:y>54</pd:y>
        <config>
            <timeout>0</timeout>
            <soapAttachmentStyle>SwA</soapAttachmentStyle>
            <timeoutType>Seconds</timeoutType>
            <service>pfx:OPExtInterface</service>
            <servicePort>OPExtInterfaceSoap</servicePort>
            <operation>SendToRealization</operation>
            <soapAction>http://ofmservices.org/SendToRealization</soapAction>
            <endpointURL>%%OfmSoap%%</endpointURL>
            <authScheme>NONE</authScheme>
        </config>
        <pd:inputBindings>
            <inputMessage>
                <pfx:SendToRealization>
                    <pfx:poid>
                        <xsl:value-of select="$Parse-Deal-JSON/ns:ActivityOutputClass/opportunity/projectNumber"/>
                    </pfx:poid>
                    <pfx:empNo>
                        <xsl:value-of select="$Get-HRMS-EmpNo/resultSet/Record[1]/HRMS_EMPLOYEE_ID"/>
                    </pfx:empNo>
                </pfx:SendToRealization>
            </inputMessage>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Render JSON">
        <pd:type>com.tibco.plugin.json.activities.JSONRenderActivity</pd:type>
        <pd:resourceType>ae.activities.JSONRenderActivity</pd:resourceType>
        <pd:x>911</pd:x>
        <pd:y>55</pd:y>
        <config>
            <SchemaType>xsdType</SchemaType>
            <BadgerfishCheck>false</BadgerfishCheck>
            <removeRootElementForInput>true</removeRootElementForInput>
            <ActivityInputEditor>
                <xsd:element name="inputParams">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="opResult" type="xsd:int"/>
                            <xsd:element name="opErrorText" type="xsd:string"/>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </ActivityInputEditor>
        </config>
        <pd:inputBindings>
            <ns:ActivityInputClass>
                <inputParams>
                    <opResult>
                        <xsl:value-of select="$SOAPRequestReply/outputMessage/pfx:SendToRealizationResponse/pfx:result"/>
                    </opResult>
                    <opErrorText>
                        <xsl:value-of select="$SOAPRequestReply/outputMessage/pfx:SendToRealizationResponse/pfx:errMsg"/>
                    </opErrorText>
                </inputParams>
            </ns:ActivityInputClass>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Get Deal">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>154</pd:x>
        <pd:y>55</pd:y>
        <config>
            <processName>/Processes/Deal/Get Deal.process</processName>
        </config>
        <pd:inputBindings>
            <inputParams>
                <opportunityID>
                    <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/inputParams/dealID"/>
                </opportunityID>
                <adLogin>
                    <xsl:value-of select="$Start/inputParams/adLogin"/>
                </adLogin>
            </inputParams>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Parse Deal JSON">
        <pd:type>com.tibco.plugin.json.activities.JSONParserActivity</pd:type>
        <pd:resourceType>ae.activities.JSONParserActivity</pd:resourceType>
        <pd:x>271</pd:x>
        <pd:y>54</pd:y>
        <config>
            <SchemaType>xsdType</SchemaType>
            <BadgerfishCheck>false</BadgerfishCheck>
            <ActivityOutputEditor>
                <xsd:element name="opportunity">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="id" type="xsd:long"/>
                            <xsd:element name="type1" type="xsd:string"/>
                            <xsd:element name="type2" type="xsd:string"/>
                            <xsd:element name="priority" type="xsd:string"/>
                            <xsd:element name="saleProc" type="xsd:string"/>
                            <xsd:element name="saleStep" type="xsd:string"/>
                            <xsd:element name="status" type="xsd:string"/>
                            <xsd:element name="clientID" type="xsd:long"/>
                            <xsd:element name="clientName" type="xsd:string"/>
                            <xsd:element name="clientINN" type="xsd:string"/>
                            <xsd:element name="seller" type="xsd:string"/>
                            <xsd:element name="contractID" type="xsd:long"/>
                            <xsd:element name="contractNumber" type="xsd:string"/>
                            <xsd:element name="scalaID" type="xsd:long"/>
                            <xsd:element name="scalaNumber" type="xsd:string"/>
                            <xsd:element name="contractType" type="xsd:string"/>
                            <xsd:element name="contractAM" type="xsd:string"/>
                            <xsd:element name="contractSignDate" type="xsd:dateTime"/>
                            <xsd:element name="projectNumber" type="xsd:long"/>
                            <xsd:element name="projectComment" type="xsd:string"/>
                            <xsd:element name="projectContactID" type="xsd:int"/>
                            <xsd:element name="projectStatus" type="xsd:string"/>
                            <xsd:element name="proccessStepObjID" type="xsd:int"/>
                            <xsd:element name="proccessStep" type="xsd:int"/>
                            <xsd:element name="editable" type="xsd:int"/>
                            <xsd:element name="opResult" type="xsd:string"/>
                            <xsd:element name="opErrorText" type="xsd:string"/>
                            <xsd:element name="productBOReleased" type="xsd:int"/>
                            <xsd:element name="plannedFinishDate" type="xsd:dateTime"/>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </ActivityOutputEditor>
        </config>
        <pd:inputBindings>
            <ns:ActivityInputClass>
                <jsonString>
                    <xsl:value-of select="$Get-Deal/JSONoutput"/>
                </jsonString>
            </ns:ActivityInputClass>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Get Scala">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>363</pd:x>
        <pd:y>53</pd:y>
        <config>
            <processName>/Processes/Scala/Get Scala.process</processName>
        </config>
        <pd:inputBindings>
            <inputParams>
                <scalaId>
                    <xsl:value-of select="$Parse-Deal-JSON/ns:ActivityOutputClass/opportunity/scalaID"/>
                </scalaId>
                <adLogin>
                    <xsl:value-of select="$Start/inputParams/adLogin"/>
                </adLogin>
            </inputParams>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Parse Scala JSON">
        <pd:type>com.tibco.plugin.json.activities.JSONParserActivity</pd:type>
        <pd:resourceType>ae.activities.JSONParserActivity</pd:resourceType>
        <pd:x>469</pd:x>
        <pd:y>55</pd:y>
        <config>
            <SchemaType>xsdType</SchemaType>
            <BadgerfishCheck>false</BadgerfishCheck>
            <ActivityOutputEditor>
                <xsd:element name="inputParams">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="opResult" type="xsd:int"/>
                            <xsd:element name="opErrorText" type="xsd:string"/>
                            <xsd:element name="id" type="xsd:long"/>
                            <xsd:element name="scalaNumber" type="xsd:string"/>
                            <xsd:element name="contractId" type="xsd:long"/>
                            <xsd:element name="contractNumber" type="xsd:string"/>
                            <xsd:element name="clientId" type="xsd:long"/>
                            <xsd:element name="clientName" type="xsd:string"/>
                            <xsd:element name="speedCollectAccount" type="xsd:string"/>
                            <xsd:element name="billingAddressId" type="xsd:long"/>
                            <xsd:element name="billingAddressName" type="xsd:string"/>
                            <xsd:element name="billingContactId" type="xsd:long"/>
                            <xsd:element name="billingContactName" type="xsd:string"/>
                            <xsd:element name="invoicePrintId" type="xsd:long"/>
                            <xsd:element name="invoicePrintName" type="xsd:string"/>
                            <xsd:element name="invoiceSendToId" type="xsd:long"/>
                            <xsd:element name="invoiceSendToName" type="xsd:string"/>
                            <xsd:element name="voiceTrafDetailsId" type="xsd:int"/>
                            <xsd:element name="voiceTrafDetailsName" type="xsd:string"/>
                            <xsd:element name="emailForDetails" type="xsd:string"/>
                            <xsd:element name="nDSTariffId" type="xsd:int"/>
                            <xsd:element name="nDSTariffName" type="xsd:string"/>
                            <xsd:element name="invoiceDeliveryId" type="xsd:int"/>
                            <xsd:element name="invoiceDeliveryName" type="xsd:string"/>
                            <xsd:element name="emailInvoiceDelivery" type="xsd:string"/>
                            <xsd:element name="showDIDALexpandedId" type="xsd:int"/>
                            <xsd:element name="showDIDALexpandedName" type="xsd:string"/>
                            <xsd:element name="uBGId" type="xsd:int"/>
                            <xsd:element name="uBGName" type="xsd:string"/>
                            <xsd:element name="govContractId" type="xsd:string"/>
                            <xsd:element name="oppCoopLVLTPId" type="xsd:int"/>
                            <xsd:element name="oppCoopLVLTPName" type="xsd:string"/>
                            <xsd:element name="intDomID" type="xsd:string"/>
                            <xsd:element name="intDomName" type="xsd:string"/>
                            <xsd:element name="billingCurrencyId" type="xsd:long"/>
                            <xsd:element name="billingCurrencyName" type="xsd:string"/>
                            <xsd:element name="tariffsCurrencyId" type="xsd:long"/>
                            <xsd:element name="tariffsCurrencyName" type="xsd:string"/>
                            <xsd:element name="billLanguageId" type="xsd:int"/>
                            <xsd:element name="billLanguageName" type="xsd:string"/>
                            <xsd:element name="finFilialId" type="xsd:long"/>
                            <xsd:element name="finFilialName" type="xsd:string"/>
                            <xsd:element name="costBillingSystemId" type="xsd:long"/>
                            <xsd:element name="costBillingSystemName" type="xsd:string"/>
                            <xsd:element name="revenueBillingSystemId" type="xsd:long"/>
                            <xsd:element name="revenueBillingSystemName" type="xsd:string"/>
                            <xsd:element name="qoSId" type="xsd:int"/>
                            <xsd:element name="qoSName" type="xsd:string"/>
                            <xsd:element name="agentCollectorId" type="xsd:long"/>
                            <xsd:element name="agentCollectorName" type="xsd:string"/>
                            <xsd:element name="agentCollectorClientName" type="xsd:string"/>
                            <xsd:element name="pMNCode" type="xsd:string"/>
                            <xsd:element name="clirInvFTPId" type="xsd:int"/>
                            <xsd:element name="clirInvFTPName" type="xsd:string"/>
                            <xsd:element name="specifyConsumerId" type="xsd:int"/>
                            <xsd:element name="specifyConsumerName" type="xsd:string"/>
                            <xsd:element name="sMSProjectNotif" type="xsd:int"/>
                            <xsd:element name="closeDate" type="xsd:dateTime"/>
                            <xsd:element name="breakCauseId" type="xsd:long"/>
                            <xsd:element name="breakCauseName" type="xsd:string"/>
                            <xsd:element name="ringUpPhone" type="xsd:string"/>
                            <xsd:element name="ringUpEMail" type="xsd:string"/>
                            <xsd:element name="digitalSignature" type="xsd:int"/>
                            <xsd:element name="digitalSignatureDate" type="xsd:dateTime"/>
                            <xsd:element name="digitalSignatureId" type="xsd:string"/>
                            <xsd:element name="scalaNumberVKId" type="xsd:long"/>
                            <xsd:element name="scalaNumberVKName" type="xsd:string"/>
                            <xsd:element name="trafficTypeId" type="xsd:int"/>
                            <xsd:element name="trafficTypeName" type="xsd:string"/>
                            <xsd:element name="scalaNumberMGMNName" type="xsd:string"/>
                            <xsd:element name="editable" type="xsd:int"/>
                            <xsd:element name="underControl" type="xsd:int"/>
                            <xsd:element name="nBO" type="xsd:long"/>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </ActivityOutputEditor>
        </config>
        <pd:inputBindings>
            <ns:ActivityInputClass>
                <jsonString>
                    <xsl:value-of select="$Get-Scala/JSONoutput"/>
                </jsonString>
            </ns:ActivityInputClass>
        </pd:inputBindings>
    </pd:activity>
    <pd:group name="Group">
        <pd:type>com.tibco.pe.core.TransactionGroup</pd:type>
        <pd:resourceType>ae.process.group</pd:resourceType>
        <pd:x>187</pd:x>
        <pd:y>210</pd:y>
        <pd:width>836</pd:width>
        <pd:height>338</pd:height>
        <pd:collapsedWidth>57</pd:collapsedWidth>
        <pd:collapsedHeight>70</pd:collapsedHeight>
        <pd:groupVariables/>
        <pd:joinToggle>inherit</pd:joinToggle>
        <config>
            <pd:groupType>transactionGroup</pd:groupType>
            <pd:serializable>false</pd:serializable>
            <pd:transactionType>JDBCTransaction</pd:transactionType>
            <pd:includeCheckpoint>false</pd:includeCheckpoint>
        </config>
        <pd:inputBindings/>
        <pd:expanded>true</pd:expanded>
        <pd:transition>
            <pd:from>start</pd:from>
            <pd:to>Data Query</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Client Update</pd:from>
            <pd:to>end</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>otherwise</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Release BO</pd:from>
            <pd:to>Deal Update</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Render BO JSON</pd:from>
            <pd:to>Release BO</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Get Contract</pd:from>
            <pd:to>Parse Contract XML</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Parse Contract XML</pd:from>
            <pd:to>Get Client</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Get Client</pd:from>
            <pd:to>Parse Client XML</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Parse BO JSON</pd:from>
            <pd:to>Get Contract</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>otherwise</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Render Scala XML</pd:from>
            <pd:to>Scala Update</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Parse BO JSON</pd:from>
            <pd:to>Generate Error</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>xpath</pd:conditionType>
            <pd:xpath>string-length($Parse-BO-JSON/ns:ActivityOutputClass/inputParams/opErrorText)&gt;0</pd:xpath>
        </pd:transition>
        <pd:transition>
            <pd:from>Parse Client XML</pd:from>
            <pd:to>Render Scala XML</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Scala Update</pd:from>
            <pd:to>Render Contract XML</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>otherwise</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Render Contract XML</pd:from>
            <pd:to>Contract Update</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Contract Update</pd:from>
            <pd:to>Render Client XML</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>otherwise</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Render Client XML</pd:from>
            <pd:to>Client Update</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Scala Update</pd:from>
            <pd:to>Generate-Error-1</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>xpath</pd:conditionType>
            <pd:xpath>$Scala-Update/resultSet/outputSet/opResult !=0</pd:xpath>
        </pd:transition>
        <pd:transition>
            <pd:from>Contract Update</pd:from>
            <pd:to>Generate-Error-2</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>xpath</pd:conditionType>
            <pd:xpath>$Contract-Update/resultSet/outputSet/opResult !=0</pd:xpath>
        </pd:transition>
        <pd:transition>
            <pd:from>Client Update</pd:from>
            <pd:to>Generate-Error-3</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>xpath</pd:conditionType>
            <pd:xpath>$Client-Update/resultSet/outputSet/opResult !=0</pd:xpath>
        </pd:transition>
        <pd:transition>
            <pd:from>Data Query</pd:from>
            <pd:to>Render BO JSON</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Deal Update</pd:from>
            <pd:to>Parse BO JSON</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>otherwise</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Deal Update</pd:from>
            <pd:to>Generate-Error-4</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>xpath</pd:conditionType>
            <pd:xpath>$Deal-Update/resultSet/outputSet/opResult !=0</pd:xpath>
        </pd:transition>
        <pd:activity name="Release BO">
            <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
            <pd:resourceType>ae.process.subprocess</pd:resourceType>
            <pd:x>352</pd:x>
            <pd:y>272</pd:y>
            <config>
                <processName>/Processes/Billing Order/Release BO.process</processName>
            </config>
            <pd:inputBindings>
                <inputParams>
                    <inputJSON>
                        <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$Render-BO-JSON/ns:ActivityOutputClass/jsonString"/>
                    </inputJSON>
                    <adLogin>
                        <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$Start/inputParams/adLogin"/>
                    </adLogin>
                </inputParams>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="Parse BO JSON">
            <pd:type>com.tibco.plugin.json.activities.JSONParserActivity</pd:type>
            <pd:resourceType>ae.activities.JSONParserActivity</pd:resourceType>
            <pd:x>355</pd:x>
            <pd:y>482</pd:y>
            <config>
                <SchemaType>xsdType</SchemaType>
                <BadgerfishCheck>false</BadgerfishCheck>
                <ActivityOutputEditor>
                    <xsd:element name="inputParams">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="recordId" type="xsd:int"/>
                                <xsd:element name="opErrorText" type="xsd:string"/>
                            </xsd:sequence>
                        </xsd:complexType>
                    </xsd:element>
                </ActivityOutputEditor>
            </config>
            <pd:inputBindings>
                <ns:ActivityInputClass>
                    <jsonString>
                        <xsl:value-of select="$Release-BO/JSONoutput"/>
                    </jsonString>
                </ns:ActivityInputClass>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="Render BO JSON">
            <pd:type>com.tibco.plugin.json.activities.JSONRenderActivity</pd:type>
            <pd:resourceType>ae.activities.JSONRenderActivity</pd:resourceType>
            <pd:x>253</pd:x>
            <pd:y>272</pd:y>
            <config>
                <SchemaType>xsdType</SchemaType>
                <BadgerfishCheck>false</BadgerfishCheck>
                <removeRootElementForInput>true</removeRootElementForInput>
                <ActivityInputEditor>
                    <xsd:element name="input">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="boType" type="xsd:int"/>
                                <xsd:element name="scalaId" type="xsd:long"/>
                                <xsd:element name="contract" minOccurs="0">
                                    <xsd:complexType>
                                        <xsd:sequence>
                                            <xsd:element name="contractClientName" type="xsd:string" minOccurs="0"/>
                                            <xsd:element name="salesManagerId" type="xsd:long" minOccurs="0"/>
                                            <xsd:element name="signedDate" type="xsd:dateTime" minOccurs="0"/>
                                            <xsd:element name="operLicenseId" type="xsd:long" minOccurs="0"/>
                                            <xsd:element name="joinLevelId" type="xsd:long" minOccurs="0"/>
                                            <xsd:element name="crossClientID" type="xsd:long" minOccurs="0"/>
                                            <xsd:element name="uSFId" type="xsd:long" minOccurs="0"/>
                                            <xsd:element name="aBHId" type="xsd:long" minOccurs="0"/>
                                            <xsd:element name="contractInvoiceId" type="xsd:long" minOccurs="0"/>
                                            <xsd:element name="sendDataToExtId" type="xsd:long" minOccurs="0"/>
                                            <xsd:element name="profitID" type="xsd:long" minOccurs="0"/>
                                            <xsd:element name="setFineId" type="xsd:long" minOccurs="0"/>
                                            <xsd:element name="fineTypeId" type="xsd:long" minOccurs="0"/>
                                            <xsd:element name="fine" type="xsd:float" minOccurs="0"/>
                                            <xsd:element name="penyRFRId" type="xsd:long" minOccurs="0"/>
                                            <xsd:element name="invoicePayPeriod" type="xsd:string" minOccurs="0"/>
                                            <xsd:element name="breakDate" type="xsd:dateTime" minOccurs="0"/>
                                            <xsd:element name="breakCauseId" type="xsd:long" minOccurs="0"/>
                                            <xsd:element name="businnesUnitId" type="xsd:long" minOccurs="0"/>
                                            <xsd:element name="supplierId" type="xsd:long" minOccurs="0"/>
                                            <xsd:element name="serviceLevelId" type="xsd:long" minOccurs="0"/>
                                            <xsd:element name="agreePrivateInfoId" type="xsd:long" minOccurs="0"/>
                                            <xsd:element name="bank" type="xsd:string" minOccurs="0"/>
                                            <xsd:element name="account" type="xsd:string" minOccurs="0"/>
                                            <xsd:element name="bik" type="xsd:string" minOccurs="0"/>
                                            <xsd:element name="corrAccount" type="xsd:string" minOccurs="0"/>
                                            <xsd:element name="kpp" type="xsd:string" minOccurs="0"/>
                                            <xsd:element name="saleOfficeId" type="xsd:long" minOccurs="0"/>
                                            <xsd:element name="salePointId" type="xsd:long" minOccurs="0"/>
                                            <xsd:element name="fineWarrantNumber" type="xsd:string" minOccurs="0"/>
                                        </xsd:sequence>
                                    </xsd:complexType>
                                </xsd:element>
                                <xsd:element name="scala" minOccurs="0">
                                    <xsd:complexType>
                                        <xsd:sequence>
                                            <xsd:element name="nDSTariffId" type="xsd:int" minOccurs="0"/>
                                            <xsd:element name="billingCurrencyId" type="xsd:int" minOccurs="0"/>
                                            <xsd:element name="tariffsCurrencyId" type="xsd:int" minOccurs="0"/>
                                            <xsd:element name="agentCollectorId" type="xsd:int" minOccurs="0"/>
                                            <xsd:element name="govContractId" type="xsd:string" minOccurs="0"/>
                                            <xsd:element name="oppCoopLVLTPId" type="xsd:int" minOccurs="0"/>
                                            <xsd:element name="closeDate" type="xsd:dateTime" minOccurs="0"/>
                                            <xsd:element name="breakCauseId" type="xsd:int" minOccurs="0"/>
                                            <xsd:element name="billingAddressId" type="xsd:int" minOccurs="0"/>
                                            <xsd:element name="billingContactId" type="xsd:int" minOccurs="0"/>
                                            <xsd:element name="invoicePrintId" type="xsd:int" minOccurs="0"/>
                                            <xsd:element name="invoiceSendToId" type="xsd:int" minOccurs="0"/>
                                            <xsd:element name="voiceTrafDetailsId" type="xsd:int" minOccurs="0"/>
                                            <xsd:element name="emailForDetails" type="xsd:string" minOccurs="0"/>
                                            <xsd:element name="invoiceDeliveryId" type="xsd:int" minOccurs="0"/>
                                            <xsd:element name="emailInvoiceDelivery" type="xsd:string" minOccurs="0"/>
                                            <xsd:element name="showDIDALexpandedId" type="xsd:int" minOccurs="0"/>
                                            <xsd:element name="uBGId" type="xsd:int" minOccurs="0"/>
                                            <xsd:element name="billLanguageId" type="xsd:int" minOccurs="0"/>
                                            <xsd:element name="specifyConsumerId" type="xsd:int" minOccurs="0"/>
                                            <xsd:element name="ringUpPhone" type="xsd:string" minOccurs="0"/>
                                            <xsd:element name="ringUpEMail" type="xsd:string" minOccurs="0"/>
                                            <xsd:element name="digitalSignature" type="xsd:int" minOccurs="0"/>
                                            <xsd:element name="digitalSignatureDate" type="xsd:dateTime" minOccurs="0"/>
                                            <xsd:element name="digitalSignatureId" type="xsd:string" minOccurs="0"/>
                                            <xsd:element name="scalaNumberVKId" type="xsd:int" minOccurs="0"/>
                                            <xsd:element name="trafficTypeId" type="xsd:int" minOccurs="0"/>
                                        </xsd:sequence>
                                    </xsd:complexType>
                                </xsd:element>
                                <xsd:element name="client" minOccurs="0">
                                    <xsd:complexType>
                                        <xsd:sequence>
                                            <xsd:element name="legalAddressId" type="xsd:long" minOccurs="0"/>
                                            <xsd:element name="contactAddressId" type="xsd:long" minOccurs="0"/>
                                            <xsd:element name="carrierTypeId" type="xsd:long" minOccurs="0"/>
                                            <xsd:element name="clientSMID" type="xsd:long" minOccurs="0"/>
                                            <xsd:element name="inn" type="xsd:string" minOccurs="0"/>
                                            <xsd:element name="officialStatus" type="xsd:string" minOccurs="0"/>
                                            <xsd:element name="okvedCodeID" type="xsd:long" minOccurs="0"/>
                                            <xsd:element name="orgFormID" type="xsd:long" minOccurs="0"/>
                                            <xsd:element name="segmentID" type="xsd:long" minOccurs="0"/>
                                            <xsd:element name="clientName" type="xsd:string" minOccurs="0"/>
                                        </xsd:sequence>
                                    </xsd:complexType>
                                </xsd:element>
                            </xsd:sequence>
                        </xsd:complexType>
                    </xsd:element>
                </ActivityInputEditor>
            </config>
            <pd:inputBindings>
                <ns:ActivityInputClass>
                    <input>
                        <boType>
                            <xsl:value-of select="4"/>
                        </boType>
                        <scalaId>
                            <xsl:value-of select="$Parse-Scala-JSON/ns:ActivityOutputClass/inputParams/id"/>
                        </scalaId>
                        <xsl:copy-of select="$Parse-JSON/ns:ActivityOutputClass/inputParams/contract"/>
                        <xsl:copy-of select="$Parse-JSON/ns:ActivityOutputClass/inputParams/scala"/>
                        <client>
                            <xsl:if test="$Parse-JSON/ns:ActivityOutputClass/inputParams/client/legalAddressId">
                                <legalAddressId>
                                    <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/inputParams/client/legalAddressId"/>
                                </legalAddressId>
                            </xsl:if>
                            <xsl:if test="$Parse-JSON/ns:ActivityOutputClass/inputParams/client/contactAddressId">
                                <contactAddressId>
                                    <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/inputParams/client/contactAddressId"/>
                                </contactAddressId>
                            </xsl:if>
                            <xsl:if test="$Parse-JSON/ns:ActivityOutputClass/inputParams/client/carrierTypeId">
                                <carrierTypeId>
                                    <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/inputParams/client/carrierTypeId"/>
                                </carrierTypeId>
                            </xsl:if>
                            <xsl:if test="$Parse-JSON/ns:ActivityOutputClass/inputParams/client/clientSMID">
                                <clientSMID>
                                    <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/inputParams/client/clientSMID"/>
                                </clientSMID>
                            </xsl:if>
                            <xsl:if test="$Parse-JSON/ns:ActivityOutputClass/inputParams/client/inn">
                                <inn>
                                    <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/inputParams/client/inn"/>
                                </inn>
                            </xsl:if>
                            <xsl:if test="$Parse-JSON/ns:ActivityOutputClass/inputParams/client/officialStatus">
                                <officialStatus>
                                    <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/inputParams/client/officialStatus"/>
                                </officialStatus>
                            </xsl:if>
                            <xsl:if test="$Parse-JSON/ns:ActivityOutputClass/inputParams/client/okvedCodeID">
                                <okvedCodeID>
                                    <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/inputParams/client/okvedCodeID"/>
                                </okvedCodeID>
                            </xsl:if>
                            <xsl:if test="$Data-Query/resultSet/Record[1]/ID">
                                <orgFormID>
                                    <xsl:value-of select="$Data-Query/resultSet/Record[1]/ID"/>
                                </orgFormID>
                            </xsl:if>
                            <xsl:if test="$Parse-JSON/ns:ActivityOutputClass/inputParams/client/segmentID">
                                <segmentID>
                                    <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/inputParams/client/segmentID"/>
                                </segmentID>
                            </xsl:if>
                            <xsl:if test="$Parse-JSON/ns:ActivityOutputClass/inputParams/client/clientName">
                                <clientName>
                                    <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/inputParams/client/clientName"/>
                                </clientName>
                            </xsl:if>
                        </client>
                    </input>
                </ns:ActivityInputClass>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="Get Contract">
            <pd:type>com.tibco.plugin.jdbc.JDBCCallActivity</pd:type>
            <pd:resourceType>ae.activities.JDBCCallActivity</pd:resourceType>
            <pd:x>489</pd:x>
            <pd:y>374</pd:y>
            <config>
                <timeout>%%Timeout%%</timeout>
                <maxRows>1</maxRows>
                <emptyStrAsNil>false</emptyStrAsNil>
                <jdbcSharedConfig>/Connection/MSSQL Connection (SF).sharedjdbc</jdbcSharedConfig>
                <ProcedureName>Contract_GetRecord;1</ProcedureName>
                <useSchema>false</useSchema>
                <schema>%%Schema%%</schema>
                <parameterTypes>
                    <parameter>
                        <colName>@RETURN_VALUE</colName>
                        <colType>5</colType>
                        <dataType>4</dataType>
                        <typeName>int</typeName>
                    </parameter>
                    <parameter>
                        <colName>@ID</colName>
                        <colType>1</colType>
                        <dataType>4</dataType>
                        <typeName>int</typeName>
                    </parameter>
                    <parameter>
                        <colName>@adLogin</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>varchar</typeName>
                    </parameter>
                    <parameter>
                        <colName>@opResult</colName>
                        <colType>2</colType>
                        <dataType>4</dataType>
                        <typeName>int</typeName>
                    </parameter>
                    <parameter>
                        <colName>@opErrorText</colName>
                        <colType>2</colType>
                        <dataType>12</dataType>
                        <typeName>varchar</typeName>
                    </parameter>
                </parameterTypes>
            </config>
            <pd:inputBindings>
                <inputs>
                    <inputSet>
                        <ID>
                            <xsl:value-of select="$Parse-Scala-JSON/ns:ActivityOutputClass/inputParams/contractId"/>
                        </ID>
                        <adLogin>
                            <xsl:value-of select="$Start/inputParams/adLogin"/>
                        </adLogin>
                        <opResult>
                            <xsl:value-of select="0"/>
                        </opResult>
                        <opErrorText>
                            <xsl:value-of select="&quot;&quot;"/>
                        </opErrorText>
                    </inputSet>
                </inputs>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="Parse Contract XML">
            <pd:type>com.tibco.plugin.xml.XMLParseActivity</pd:type>
            <pd:resourceType>ae.activities.XMLParseActivity</pd:resourceType>
            <pd:x>491</pd:x>
            <pd:y>482</pd:y>
            <config>
                <inputStyle>text</inputStyle>
                <xsdVersion>default</xsdVersion>
                <validateOutput>false</validateOutput>
                <term>
                    <xs:element xmlns:xs="http://www.w3.org/2001/XMLSchema" name="Resultsets">
                        <xs:complexType>
                            <xs:sequence>
                                <xs:element name="UpdateCount" type="xsd:int"/>
                                <xs:element name="ResultSet1">
                                    <xs:complexType>
                                        <xs:sequence>
                                            <xs:element name="Record1">
                                                <xs:complexType>
                                                    <xs:sequence>
                                                        <xs:element name="Id" type="xsd:long"/>
                                                        <xs:element name="ClientId" type="xsd:long"/>
                                                        <xs:element name="ClientName" type="xsd:string"/>
                                                        <xs:element name="ContractNumber" type="xsd:string"/>
                                                        <xs:element name="ContractClientName" type="xsd:string"/>
                                                        <xs:element name="SalesManagerId" type="xsd:long"/>
                                                        <xs:element name="SalesManagerName" type="xsd:string"/>
                                                        <xs:element name="ContractTypeSFId" type="xsd:long"/>
                                                        <xs:element name="ContractTypeSFName" type="xsd:string"/>
                                                        <xs:element name="ContactId" type="xsd:long"/>
                                                        <xs:element name="ContactName" type="xsd:string"/>
                                                        <xs:element name="SignedDate" type="xsd:dateTime"/>
                                                        <xs:element name="OperLicenseId" type="xsd:long"/>
                                                        <xs:element name="OperLicenseName" type="xsd:string"/>
                                                        <xs:element name="JoinLevelId" type="xsd:long"/>
                                                        <xs:element name="JoinLevelName" type="xsd:string"/>
                                                        <xs:element name="CollectionManagerId" type="xsd:long"/>
                                                        <xs:element name="CollectionManagerName" type="xsd:string"/>
                                                        <xs:element name="CollectionStatus" type="xsd:string"/>
                                                        <xs:element name="CrossClientID" type="xsd:long"/>
                                                        <xs:element name="USFId" type="xsd:long"/>
                                                        <xs:element name="USFName" type="xsd:string"/>
                                                        <xs:element name="BlockDate" type="xsd:dateTime"/>
                                                        <xs:element name="BlockOpStatusId" type="xsd:long"/>
                                                        <xs:element name="BlockOpStatusName" type="xsd:string"/>
                                                        <xs:element name="ABHId" type="xsd:long"/>
                                                        <xs:element name="ABHName" type="xsd:string"/>
                                                        <xs:element name="ContractInvoiceId" type="xsd:long"/>
                                                        <xs:element name="ContractInvoiceName" type="xsd:string"/>
                                                        <xs:element name="ContractInvoiceClientName" type="xsd:string"/>
                                                        <xs:element name="SendDataToExtId" type="xsd:long"/>
                                                        <xs:element name="SendDataToExtame" type="xsd:string"/>
                                                        <xs:element name="VAT" type="xsd:string"/>
                                                        <xs:element name="ProfitID" type="xsd:long"/>
                                                        <xs:element name="ProfitName" type="xsd:string"/>
                                                        <xs:element name="SetFineId" type="xsd:long"/>
                                                        <xs:element name="SetFineName" type="xsd:string"/>
                                                        <xs:element name="FineTypeId" type="xsd:long"/>
                                                        <xs:element name="FineTypeName" type="xsd:string"/>
                                                        <xs:element name="Fine" type="xsd:string"/>
                                                        <xs:element name="PenyRFRId" type="xsd:long"/>
                                                        <xs:element name="PenyRFRName" type="xsd:string"/>
                                                        <xs:element name="InvoicePayPeriod" type="xsd:string"/>
                                                        <xs:element name="BreakDate" type="xsd:dateTime"/>
                                                        <xs:element name="BreakCauseId" type="xsd:long"/>
                                                        <xs:element name="BreakCauseName" type="xsd:string"/>
                                                        <xs:element name="BusinnesUnitId" type="xsd:long"/>
                                                        <xs:element name="BusinnesUnitName" type="xsd:string"/>
                                                        <xs:element name="SupplierId" type="xsd:long"/>
                                                        <xs:element name="SupplierName" type="xsd:string"/>
                                                        <xs:element name="Branch" type="xsd:string"/>
                                                        <xs:element name="Balance" type="xsd:string"/>
                                                        <xs:element name="BillingCycleCode" type="xsd:string"/>
                                                        <xs:element name="BillingCycleName" type="xsd:string"/>
                                                        <xs:element name="SegmentId" type="xsd:long"/>
                                                        <xs:element name="SegmentName" type="xsd:string"/>
                                                        <xs:element name="ServiceLevelId" type="xsd:long"/>
                                                        <xs:element name="ServiceLevelName" type="xsd:string"/>
                                                        <xs:element name="AgreePrivateInfoId" type="xsd:long"/>
                                                        <xs:element name="AgreePrivateInfoName" type="xsd:string"/>
                                                        <xs:element name="Bank" type="xsd:string"/>
                                                        <xs:element name="Account" type="xsd:string"/>
                                                        <xs:element name="BIK" type="xsd:string"/>
                                                        <xs:element name="CorrAccount" type="xsd:string"/>
                                                        <xs:element name="KPP" type="xsd:string"/>
                                                        <xs:element name="DealPassport" type="xsd:string"/>
                                                        <xs:element name="DealBank" type="xsd:string"/>
                                                        <xs:element name="SaleOfficeId" type="xsd:long"/>
                                                        <xs:element name="SaleOfficeName" type="xsd:string"/>
                                                        <xs:element name="SalePointId" type="xsd:long"/>
                                                        <xs:element name="SalePointName" type="xsd:string"/>
                                                        <xs:element name="UnderControl" type="xsd:int"/>
                                                        <xs:element name="FineWarrantNumber" type="xsd:string"/>
                                                        <xs:element name="Editable" type="xsd:int"/>
                                                    </xs:sequence>
                                                </xs:complexType>
                                            </xs:element>
                                        </xs:sequence>
                                    </xs:complexType>
                                </xs:element>
                            </xs:sequence>
                        </xs:complexType>
                    </xs:element>
                </term>
            </config>
            <pd:inputBindings>
                <xmlString>
                    <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$Get-Contract/resultSet/UnresolvedResultsets"/>
                </xmlString>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="Get Client">
            <pd:type>com.tibco.plugin.jdbc.JDBCCallActivity</pd:type>
            <pd:resourceType>ae.activities.JDBCCallActivity</pd:resourceType>
            <pd:x>590</pd:x>
            <pd:y>482</pd:y>
            <config>
                <timeout>%%Timeout%%</timeout>
                <maxRows>100</maxRows>
                <emptyStrAsNil>false</emptyStrAsNil>
                <jdbcSharedConfig>/Connection/MSSQL Connection (SF).sharedjdbc</jdbcSharedConfig>
                <ProcedureName>Client_GetRecord;1</ProcedureName>
                <useSchema>false</useSchema>
                <schema>%%Schema%%</schema>
                <parameterTypes>
                    <parameter>
                        <colName>@RETURN_VALUE</colName>
                        <colType>5</colType>
                        <dataType>4</dataType>
                        <typeName>int</typeName>
                    </parameter>
                    <parameter>
                        <colName>@ID</colName>
                        <colType>1</colType>
                        <dataType>4</dataType>
                        <typeName>int</typeName>
                    </parameter>
                    <parameter>
                        <colName>@adLogin</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>varchar</typeName>
                    </parameter>
                    <parameter>
                        <colName>@opResult</colName>
                        <colType>2</colType>
                        <dataType>4</dataType>
                        <typeName>int</typeName>
                    </parameter>
                    <parameter>
                        <colName>@opErrorText</colName>
                        <colType>2</colType>
                        <dataType>12</dataType>
                        <typeName>varchar</typeName>
                    </parameter>
                </parameterTypes>
            </config>
            <pd:inputBindings>
                <inputs>
                    <inputSet>
                        <ID>
                            <xsl:value-of select="$Parse-Contract-XML/Resultsets/ResultSet1/Record1/ClientId"/>
                        </ID>
                        <adLogin>
                            <xsl:value-of select="$Start/inputParams/adLogin"/>
                        </adLogin>
                        <opResult>
                            <xsl:value-of select="0"/>
                        </opResult>
                        <opErrorText>
                            <xsl:value-of select="&quot;&quot;"/>
                        </opErrorText>
                    </inputSet>
                </inputs>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="Parse Client XML">
            <pd:type>com.tibco.plugin.xml.XMLParseActivity</pd:type>
            <pd:resourceType>ae.activities.XMLParseActivity</pd:resourceType>
            <pd:x>590</pd:x>
            <pd:y>387</pd:y>
            <config>
                <inputStyle>text</inputStyle>
                <xsdVersion>default</xsdVersion>
                <validateOutput>false</validateOutput>
                <term>
                    <xsd:element name="Resultsets">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="UpdateCount" type="xsd:int"/>
                                <xsd:element name="ResultSet1">
                                    <xsd:complexType>
                                        <xsd:sequence>
                                            <xsd:element name="Record1">
                                                <xsd:complexType>
                                                    <xsd:sequence>
                                                        <xsd:element name="ClientID" type="xsd:long"/>
                                                        <xsd:element name="ClientType" type="xsd:int"/>
                                                        <xsd:element name="ClientTypeName" type="xsd:string"/>
                                                        <xsd:element name="ClientName" type="xsd:string"/>
                                                        <xsd:element name="SegmentID" type="xsd:long"/>
                                                        <xsd:element name="SegmentName" type="xsd:string"/>
                                                        <xsd:element name="OfficialStatus" type="xsd:int"/>
                                                        <xsd:element name="OfficialStatusName" type="xsd:string"/>
                                                        <xsd:element name="ClientCharacterCode" type="xsd:string"/>
                                                        <xsd:element name="ClientCharacterName" type="xsd:string"/>
                                                        <xsd:element name="MainBranchCode" type="xsd:string"/>
                                                        <xsd:element name="MainBranchName" type="xsd:string"/>
                                                        <xsd:element name="BranchCode" type="xsd:string"/>
                                                        <xsd:element name="BranchName" type="xsd:string"/>
                                                        <xsd:element name="InfSourceCode" type="xsd:string"/>
                                                        <xsd:element name="InfSourceName" type="xsd:string"/>
                                                        <xsd:element name="OrgFormID" type="xsd:long"/>
                                                        <xsd:element name="OrgFormName" type="xsd:string"/>
                                                        <xsd:element name="ClientSMID" type="xsd:long"/>
                                                        <xsd:element name="ClientSM" type="xsd:string"/>
                                                        <xsd:element name="PersonalManager" type="xsd:string"/>
                                                        <xsd:element name="Trademark" type="xsd:string"/>
                                                        <xsd:element name="ClientShortName" type="xsd:string"/>
                                                        <xsd:element name="inn" type="xsd:string"/>
                                                        <xsd:element name="LegalAddressId" type="xsd:int"/>
                                                        <xsd:element name="LegalAddressName" type="xsd:string"/>
                                                        <xsd:element name="ContactAddressId" type="xsd:int"/>
                                                        <xsd:element name="ContactAddressName" type="xsd:string"/>
                                                        <xsd:element name="www" type="xsd:string"/>
                                                        <xsd:element name="ClientDateReg" type="xsd:dateTime"/>
                                                        <xsd:element name="OKVEDCodeID" type="xsd:long"/>
                                                        <xsd:element name="OKVEDCode" type="xsd:string"/>
                                                        <xsd:element name="OKVEDCodeName" type="xsd:string"/>
                                                        <xsd:element name="kpp" type="xsd:string"/>
                                                        <xsd:element name="ogrn" type="xsd:string"/>
                                                        <xsd:element name="okpo" type="xsd:string"/>
                                                        <xsd:element name="CreateDate" type="xsd:dateTime"/>
                                                        <xsd:element name="CreateUser" type="xsd:string"/>
                                                        <xsd:element name="CreaterID" type="xsd:long"/>
                                                        <xsd:element name="ContactID" type="xsd:int"/>
                                                        <xsd:element name="ContactName" type="xsd:string"/>
                                                        <xsd:element name="ContactFirstName" type="xsd:string"/>
                                                        <xsd:element name="ContactLastName" type="xsd:string"/>
                                                        <xsd:element name="ContactMiddleName" type="xsd:string"/>
                                                        <xsd:element name="ContactPhone" type="xsd:string"/>
                                                        <xsd:element name="ContactPhone2" type="xsd:string" minOccurs="0"/>
                                                        <xsd:element name="ContactEmail" type="xsd:string"/>
                                                        <xsd:element name="companyGroupID" type="xsd:long"/>
                                                        <xsd:element name="companyGroupName" type="xsd:string"/>
                                                        <xsd:element name="SPARKLiquidationDate" type="xsd:date"/>
                                                        <xsd:element name="SPARKCauseLiquidation" type="xsd:string"/>
                                                        <xsd:element name="OperatorConnect" type="xsd:int"/>
                                                        <xsd:element name="CarrierTypeId" type="xsd:int"/>
                                                        <xsd:element name="CarrierTypeName" type="xsd:string"/>
                                                        <xsd:element name="ClientEditable" type="xsd:int"/>
                                                        <xsd:element name="ContractCount" type="xsd:int"/>
                                                        <xsd:element name="ClientManager" type="xsd:string"/>
                                                        <xsd:element name="UnderControl" type="xsd:int"/>
                                                        <xsd:element name="SPARKIsActive" type="xsd:int"/>
                                                        <xsd:element name="SPARKStatusDate" type="xsd:date"/>
                                                        <xsd:element name="SPARKStatus" type="xsd:string"/>
                                                        <xsd:element name="ClientFirstName" type="xsd:string" minOccurs="0"/>
                                                        <xsd:element name="ClientLastName" type="xsd:string"/>
                                                        <xsd:element name="ClientMiddleName" type="xsd:string"/>
                                                        <xsd:element name="legalAddressReadyForEdo" type="xsd:int"/>
                                                    </xsd:sequence>
                                                </xsd:complexType>
                                            </xsd:element>
                                        </xsd:sequence>
                                    </xsd:complexType>
                                </xsd:element>
                            </xsd:sequence>
                        </xsd:complexType>
                    </xsd:element>
                </term>
            </config>
            <pd:inputBindings>
                <xmlString>
                    <xsl:value-of select="$Get-Client/resultSet/UnresolvedResultsets"/>
                </xmlString>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="Render Scala XML">
            <pd:type>com.tibco.plugin.xml.XMLRendererActivity</pd:type>
            <pd:resourceType>ae.activities.XMLRendererActivity</pd:resourceType>
            <pd:x>590</pd:x>
            <pd:y>272</pd:y>
            <config>
                <renderAsText>text</renderAsText>
                <validateInput>false</validateInput>
                <textEncoding>windows-1251</textEncoding>
                <term>
                    <xsd:element name="scala" minOccurs="0">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="NDSTariffId" type="xsd:int" minOccurs="0"/>
                                <xsd:element name="BillingCurrencyId" type="xsd:int" minOccurs="0"/>
                                <xsd:element name="TariffsCurrencyId" type="xsd:int" minOccurs="0"/>
                                <xsd:element name="AgentCollectorId" type="xsd:int" minOccurs="0"/>
                                <xsd:element name="PMNCode" type="xsd:string" minOccurs="0"/>
                                <xsd:element name="ClirInvFTPId" type="xsd:int" minOccurs="0"/>
                                <xsd:element name="GovContractId" type="xsd:string" minOccurs="0"/>
                                <xsd:element name="OppCoopLVLTPId" type="xsd:int" minOccurs="0"/>
                                <xsd:element name="CloseDate" type="xsd:dateTime" minOccurs="0"/>
                                <xsd:element name="BreakCauseId" type="xsd:int" minOccurs="0"/>
                                <xsd:element name="BillingAddressId" type="xsd:int" minOccurs="0"/>
                                <xsd:element name="BillingContactId" type="xsd:int" minOccurs="0"/>
                                <xsd:element name="InvoicePrintId" type="xsd:int" minOccurs="0"/>
                                <xsd:element name="InvoiceSendToId" type="xsd:int" minOccurs="0"/>
                                <xsd:element name="VoiceTrafDetailsId" type="xsd:int" minOccurs="0"/>
                                <xsd:element name="EmailForDetails" type="xsd:string" minOccurs="0"/>
                                <xsd:element name="InvoiceDeliveryId" type="xsd:int" minOccurs="0"/>
                                <xsd:element name="EmailInvoiceDelivery" type="xsd:string" minOccurs="0"/>
                                <xsd:element name="ShowDIDALexpandedId" type="xsd:int" minOccurs="0"/>
                                <xsd:element name="UBGId" type="xsd:int" minOccurs="0"/>
                                <xsd:element name="IntDomID" type="xsd:string" minOccurs="0"/>
                                <xsd:element name="BillLanguageId" type="xsd:int" minOccurs="0"/>
                                <xsd:element name="CostBillingSystemId" type="xsd:int" minOccurs="0"/>
                                <xsd:element name="RevenueBillingSystemId" type="xsd:int" minOccurs="0"/>
                                <xsd:element name="SpecifyConsumerId" type="xsd:int" minOccurs="0"/>
                                <xsd:element name="SMSProjectNotif" type="xsd:int" minOccurs="0"/>
                                <xsd:element name="RingUpPhone" type="xsd:string" minOccurs="0"/>
                                <xsd:element name="RingUpEMail" type="xsd:string" minOccurs="0"/>
                                <xsd:element name="DigitalSignature" type="xsd:int" minOccurs="0"/>
                                <xsd:element name="DigitalSignatureDate" type="xsd:dateTime" minOccurs="0"/>
                                <xsd:element name="DigitalSignatureId" type="xsd:string" minOccurs="0"/>
                                <xsd:element name="ScalaNumberVKId" type="xsd:int" minOccurs="0"/>
                                <xsd:element name="TrafficTypeId" type="xsd:int" minOccurs="0"/>
                                <xsd:element name="nbo" type="xsd:string" minOccurs="0"/>
                                <xsd:element name="scalan" type="xsd:string" minOccurs="0"/>
                                <xsd:element name="error" type="xsd:string" minOccurs="0"/>
                            </xsd:sequence>
                        </xsd:complexType>
                    </xsd:element>
                </term>
            </config>
            <pd:inputBindings>
                <scala>
                    <NDSTariffId>
                        <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/scala/nDSTariffId)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/scala/nDSTariffId else $Parse-Scala-JSON/ns:ActivityOutputClass/inputParams/nDSTariffId"/>
                    </NDSTariffId>
                    <BillingCurrencyId>
                        <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/scala/billingCurrencyId)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/scala/billingCurrencyId else $Parse-Scala-JSON/ns:ActivityOutputClass/inputParams/billingCurrencyId"/>
                    </BillingCurrencyId>
                    <TariffsCurrencyId>
                        <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/scala/tariffsCurrencyId)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/scala/tariffsCurrencyId else $Parse-Scala-JSON/ns:ActivityOutputClass/inputParams/tariffsCurrencyId"/>
                    </TariffsCurrencyId>
                    <AgentCollectorId>
                        <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/scala/agentCollectorId)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/scala/agentCollectorId else $Parse-Scala-JSON/ns:ActivityOutputClass/inputParams/agentCollectorId"/>
                    </AgentCollectorId>
                    <PMNCode>
                        <xsl:value-of select="$Parse-Scala-JSON/ns:ActivityOutputClass/inputParams/pMNCode"/>
                    </PMNCode>
                    <ClirInvFTPId>
                        <xsl:value-of select="$Parse-Scala-JSON/ns:ActivityOutputClass/inputParams/clirInvFTPId"/>
                    </ClirInvFTPId>
                    <GovContractId>
                        <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/scala/govContractId)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/scala/govContractId else $Parse-Scala-JSON/ns:ActivityOutputClass/inputParams/govContractId"/>
                    </GovContractId>
                    <OppCoopLVLTPId>
                        <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/scala/oppCoopLVLTPId)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/scala/oppCoopLVLTPId else $Parse-Scala-JSON/ns:ActivityOutputClass/inputParams/oppCoopLVLTPId"/>
                    </OppCoopLVLTPId>
                    <CloseDate>
                        <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/scala/closeDate)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/scala/closeDate else $Parse-Scala-JSON/ns:ActivityOutputClass/inputParams/closeDate"/>
                    </CloseDate>
                    <BreakCauseId>
                        <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/scala/breakCauseId)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/scala/breakCauseId else $Parse-Scala-JSON/ns:ActivityOutputClass/inputParams/breakCauseId"/>
                    </BreakCauseId>
                    <BillingAddressId>
                        <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/scala/billingAddressId)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/scala/billingAddressId else $Parse-Scala-JSON/ns:ActivityOutputClass/inputParams/billingAddressId"/>
                    </BillingAddressId>
                    <BillingContactId>
                        <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/scala/billingContactId)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/scala/billingContactId else $Parse-Scala-JSON/ns:ActivityOutputClass/inputParams/billingContactId"/>
                    </BillingContactId>
                    <InvoicePrintId>
                        <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/scala/invoicePrintId)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/scala/invoicePrintId else $Parse-Scala-JSON/ns:ActivityOutputClass/inputParams/invoicePrintId"/>
                    </InvoicePrintId>
                    <InvoiceSendToId>
                        <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/scala/invoiceSendToId)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/scala/invoiceSendToId else $Parse-Scala-JSON/ns:ActivityOutputClass/inputParams/invoiceSendToId"/>
                    </InvoiceSendToId>
                    <VoiceTrafDetailsId>
                        <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/scala/voiceTrafDetailsId)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/scala/voiceTrafDetailsId else $Parse-Scala-JSON/ns:ActivityOutputClass/inputParams/voiceTrafDetailsId"/>
                    </VoiceTrafDetailsId>
                    <EmailForDetails>
                        <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/scala/emailForDetails)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/scala/emailForDetails else $Parse-Scala-JSON/ns:ActivityOutputClass/inputParams/emailForDetails"/>
                    </EmailForDetails>
                    <InvoiceDeliveryId>
                        <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/scala/invoiceDeliveryId)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/scala/invoiceDeliveryId else $Parse-Scala-JSON/ns:ActivityOutputClass/inputParams/invoiceDeliveryId"/>
                    </InvoiceDeliveryId>
                    <EmailInvoiceDelivery>
                        <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/scala/emailInvoiceDelivery)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/scala/emailInvoiceDelivery else $Parse-Scala-JSON/ns:ActivityOutputClass/inputParams/emailInvoiceDelivery"/>
                    </EmailInvoiceDelivery>
                    <ShowDIDALexpandedId>
                        <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/scala/showDIDALexpandedId)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/scala/showDIDALexpandedId else $Parse-Scala-JSON/ns:ActivityOutputClass/inputParams/showDIDALexpandedId"/>
                    </ShowDIDALexpandedId>
                    <UBGId>
                        <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/scala/uBGId)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/scala/uBGId else $Parse-Scala-JSON/ns:ActivityOutputClass/inputParams/uBGId"/>
                    </UBGId>
                    <IntDomID>
                        <xsl:value-of select="$Parse-Scala-JSON/ns:ActivityOutputClass/inputParams/intDomID"/>
                    </IntDomID>
                    <BillLanguageId>
                        <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/scala/billLanguageId)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/scala/billLanguageId else $Parse-Scala-JSON/ns:ActivityOutputClass/inputParams/billLanguageId"/>
                    </BillLanguageId>
                    <CostBillingSystemId>
                        <xsl:value-of select="$Parse-Scala-JSON/ns:ActivityOutputClass/inputParams/costBillingSystemId"/>
                    </CostBillingSystemId>
                    <RevenueBillingSystemId>
                        <xsl:value-of select="$Parse-Scala-JSON/ns:ActivityOutputClass/inputParams/revenueBillingSystemId"/>
                    </RevenueBillingSystemId>
                    <SpecifyConsumerId>
                        <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/scala/specifyConsumerId)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/scala/specifyConsumerId else $Parse-Scala-JSON/ns:ActivityOutputClass/inputParams/specifyConsumerId"/>
                    </SpecifyConsumerId>
                    <SMSProjectNotif>
                        <xsl:value-of select="$Parse-Scala-JSON/ns:ActivityOutputClass/inputParams/sMSProjectNotif"/>
                    </SMSProjectNotif>
                    <RingUpPhone>
                        <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/scala/ringUpPhone)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/scala/ringUpPhone else $Parse-Scala-JSON/ns:ActivityOutputClass/inputParams/ringUpPhone"/>
                    </RingUpPhone>
                    <RingUpEMail>
                        <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/scala/ringUpEMail)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/scala/ringUpEMail else $Parse-Scala-JSON/ns:ActivityOutputClass/inputParams/ringUpEMail"/>
                    </RingUpEMail>
                    <DigitalSignature>
                        <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/scala/digitalSignature)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/scala/digitalSignature else $Parse-Scala-JSON/ns:ActivityOutputClass/inputParams/digitalSignature"/>
                    </DigitalSignature>
                    <DigitalSignatureDate>
                        <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/scala/digitalSignatureDate)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/scala/digitalSignatureDate else $Parse-Scala-JSON/ns:ActivityOutputClass/inputParams/digitalSignatureDate"/>
                    </DigitalSignatureDate>
                    <DigitalSignatureId>
                        <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/scala/digitalSignatureId)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/scala/digitalSignatureId else $Parse-Scala-JSON/ns:ActivityOutputClass/inputParams/digitalSignatureId"/>
                    </DigitalSignatureId>
                    <ScalaNumberVKId>
                        <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/scala/scalaNumberVKId)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/scala/scalaNumberVKId else $Parse-Scala-JSON/ns:ActivityOutputClass/inputParams/scalaNumberVKId"/>
                    </ScalaNumberVKId>
                    <TrafficTypeId>
                        <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/scala/trafficTypeId)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/scala/trafficTypeId else $Parse-Scala-JSON/ns:ActivityOutputClass/inputParams/trafficTypeId"/>
                    </TrafficTypeId>
                    <nbo>
                        <xsl:value-of select="$Parse-BO-JSON/ns:ActivityOutputClass/inputParams/recordId"/>
                    </nbo>
                    <scalan>
                        <xsl:value-of select="$Parse-Scala-JSON/ns:ActivityOutputClass/inputParams/scalaNumber"/>
                    </scalan>
                    <error>
                        <xsl:value-of select="$Parse-BO-JSON/ns:ActivityOutputClass/inputParams/opErrorText"/>
                    </error>
                </scala>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="Scala Update">
            <pd:type>com.tibco.plugin.jdbc.JDBCCallActivity</pd:type>
            <pd:resourceType>ae.activities.JDBCCallActivity</pd:resourceType>
            <pd:x>689</pd:x>
            <pd:y>272</pd:y>
            <config>
                <timeout>%%Timeout%%</timeout>
                <maxRows>100</maxRows>
                <emptyStrAsNil>false</emptyStrAsNil>
                <jdbcSharedConfig>/Connection/MSSQL Connection (SF).sharedjdbc</jdbcSharedConfig>
                <ProcedureName>Scala_CreateUpdateDelete;1</ProcedureName>
                <useSchema>false</useSchema>
                <schema>%%Schema%%</schema>
                <parameterTypes>
                    <parameter>
                        <colName>@RETURN_VALUE</colName>
                        <colType>5</colType>
                        <dataType>4</dataType>
                        <typeName>int</typeName>
                    </parameter>
                    <parameter>
                        <colName>@opType</colName>
                        <colType>1</colType>
                        <dataType>-6</dataType>
                        <typeName>tinyint</typeName>
                    </parameter>
                    <parameter>
                        <colName>@adLogin</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>varchar</typeName>
                    </parameter>
                    <parameter>
                        <colName>@contractID</colName>
                        <colType>1</colType>
                        <dataType>4</dataType>
                        <typeName>int</typeName>
                    </parameter>
                    <parameter>
                        <colName>@scalaNumber</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>varchar</typeName>
                    </parameter>
                    <parameter>
                        <colName>@scalaParams</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>varchar</typeName>
                    </parameter>
                    <parameter>
                        <colName>@recordId</colName>
                        <colType>2</colType>
                        <dataType>4</dataType>
                        <typeName>int</typeName>
                    </parameter>
                    <parameter>
                        <colName>@opResult</colName>
                        <colType>2</colType>
                        <dataType>4</dataType>
                        <typeName>int</typeName>
                    </parameter>
                    <parameter>
                        <colName>@opErrorText</colName>
                        <colType>2</colType>
                        <dataType>12</dataType>
                        <typeName>varchar</typeName>
                    </parameter>
                </parameterTypes>
            </config>
            <pd:inputBindings>
                <inputs>
                    <inputSet>
                        <opType>
                            <xsl:value-of select="2"/>
                        </opType>
                        <adLogin>
                            <xsl:value-of select="$Start/inputParams/adLogin"/>
                        </adLogin>
                        <contractID>
                            <xsl:value-of select="$Parse-Scala-JSON/ns:ActivityOutputClass/inputParams/contractId"/>
                        </contractID>
                        <scalaNumber>
                            <xsl:value-of select="$Parse-Scala-JSON/ns:ActivityOutputClass/inputParams/scalaNumber"/>
                        </scalaNumber>
                        <scalaParams>
                            <xsl:choose>
                                <xsl:when test="exists($Render-Scala-XML/xmlString)">
                                    <xsl:value-of select="$Render-Scala-XML/xmlString"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </scalaParams>
                        <recordId>
                            <xsl:value-of select="$Parse-Scala-JSON/ns:ActivityOutputClass/inputParams/id"/>
                        </recordId>
                        <opResult>
                            <xsl:value-of select="0"/>
                        </opResult>
                        <opErrorText>
                            <xsl:value-of select="&quot;&quot;"/>
                        </opErrorText>
                    </inputSet>
                </inputs>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="Generate Error">
            <pd:type>com.tibco.pe.core.GenerateErrorActivity</pd:type>
            <pd:resourceType>ae.activities.throw</pd:resourceType>
            <pd:x>247</pd:x>
            <pd:y>484</pd:y>
            <config>
                <faultName/>
            </config>
            <pd:inputBindings>
                <ns0:ActivityInput xmlns:ns0="http://www.tibco.com/pe/GenerateErrorActivity/InputSchema">
                    <message>
                        <xsl:value-of select="$Parse-BO-JSON/ns:ActivityOutputClass/inputParams/opErrorText"/>
                    </message>
                    <messageCode>
                        <xsl:value-of select="1"/>
                    </messageCode>
                </ns0:ActivityInput>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="Render Contract XML">
            <pd:type>com.tibco.plugin.xml.XMLRendererActivity</pd:type>
            <pd:resourceType>ae.activities.XMLRendererActivity</pd:resourceType>
            <pd:x>805</pd:x>
            <pd:y>281</pd:y>
            <config>
                <renderAsText>text</renderAsText>
                <validateInput>false</validateInput>
                <textEncoding>windows-1251</textEncoding>
                <term>
                    <xsd:element name="contract">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="ContractClientName" type="xsd:string"/>
                                <xsd:element name="ContractTypeSFId" type="xsd:long"/>
                                <xsd:element name="BreakDate" type="xsd:dateTime"/>
                                <xsd:element name="BreakCauseId" type="xsd:long"/>
                                <xsd:element name="ContactId" type="xsd:long"/>
                                <xsd:element name="SignedDate" type="xsd:dateTime"/>
                                <xsd:element name="OperLicenseId" type="xsd:long"/>
                                <xsd:element name="JoinLevelId" type="xsd:long"/>
                                <xsd:element name="CrossClientID" type="xsd:long"/>
                                <xsd:element name="ABHId" type="xsd:long"/>
                                <xsd:element name="ContractInvoiceId" type="xsd:long"/>
                                <xsd:element name="ProfitID" type="xsd:long"/>
                                <xsd:element name="SetFineId" type="xsd:long"/>
                                <xsd:element name="FineTypeId" type="xsd:long"/>
                                <xsd:element name="Fine" type="xsd:string"/>
                                <xsd:element name="PenyRFRId" type="xsd:long"/>
                                <xsd:element name="InvoicePayPeriod" type="xsd:string"/>
                                <xsd:element name="BillingCycleCode" type="xsd:string"/>
                                <xsd:element name="AgreePrivateInfoId" type="xsd:long"/>
                                <xsd:element name="Bank" type="xsd:string"/>
                                <xsd:element name="Account" type="xsd:string"/>
                                <xsd:element name="BIK" type="xsd:string"/>
                                <xsd:element name="CorrAccount" type="xsd:string"/>
                                <xsd:element name="KPP" type="xsd:string"/>
                                <xsd:element name="DealPassport" type="xsd:string"/>
                                <xsd:element name="FineWarrantNumber" type="xsd:string"/>
                                <xsd:element name="DealBank" type="xsd:string"/>
                                <xsd:element name="scalas">
                                    <xsd:complexType>
                                        <xsd:sequence>
                                            <xsd:element name="scala">
                                                <xsd:complexType>
                                                    <xsd:sequence>
                                                        <xsd:element name="nbo" type="xsd:string"/>
                                                        <xsd:element name="scalan" type="xsd:string"/>
                                                        <xsd:element name="error" type="xsd:string"/>
                                                    </xsd:sequence>
                                                </xsd:complexType>
                                            </xsd:element>
                                        </xsd:sequence>
                                    </xsd:complexType>
                                </xsd:element>
                            </xsd:sequence>
                        </xsd:complexType>
                    </xsd:element>
                </term>
            </config>
            <pd:inputBindings>
                <contract>
                    <ContractClientName>
                        <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/contract/contractClientName)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/contract/contractClientName else $Parse-Contract-XML/Resultsets/ResultSet1/Record1/ContractClientName"/>
                    </ContractClientName>
                    <ContractTypeSFId>
                        <xsl:value-of select="$Parse-Contract-XML/Resultsets/ResultSet1/Record1/ContractTypeSFId"/>
                    </ContractTypeSFId>
                    <BreakDate>
                        <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/contract/breakDate)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/contract/breakDate else $Parse-Contract-XML/Resultsets/ResultSet1/Record1/BreakDate"/>
                    </BreakDate>
                    <BreakCauseId>
                        <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/contract/breakCauseId)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/contract/breakCauseId else $Parse-Contract-XML/Resultsets/ResultSet1/Record1/BreakCauseId"/>
                    </BreakCauseId>
                    <ContactId>
                        <xsl:value-of select="$Parse-Contract-XML/Resultsets/ResultSet1/Record1/ContactId"/>
                    </ContactId>
                    <SignedDate>
                        <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/contract/signedDate)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/contract/signedDate else $Parse-Contract-XML/Resultsets/ResultSet1/Record1/SignedDate"/>
                    </SignedDate>
                    <OperLicenseId>
                        <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/contract/operLicenseId)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/contract/operLicenseId else $Parse-Contract-XML/Resultsets/ResultSet1/Record1/OperLicenseId"/>
                    </OperLicenseId>
                    <JoinLevelId>
                        <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/contract/joinLevelId)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/contract/joinLevelId else $Parse-Contract-XML/Resultsets/ResultSet1/Record1/JoinLevelId"/>
                    </JoinLevelId>
                    <CrossClientID>
                        <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/contract/crossClientID)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/contract/crossClientID else $Parse-Contract-XML/Resultsets/ResultSet1/Record1/CrossClientID"/>
                    </CrossClientID>
                    <ABHId>
                        <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/contract/aBHId)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/contract/aBHId else $Parse-Contract-XML/Resultsets/ResultSet1/Record1/ABHId"/>
                    </ABHId>
                    <ContractInvoiceId>
                        <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/contract/contractInvoiceId)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/contract/contractInvoiceId else $Parse-Contract-XML/Resultsets/ResultSet1/Record1/ContractInvoiceId"/>
                    </ContractInvoiceId>
                    <ProfitID>
                        <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/contract/profitID)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/contract/profitID else $Parse-Contract-XML/Resultsets/ResultSet1/Record1/ProfitID"/>
                    </ProfitID>
                    <SetFineId>
                        <xsl:value-of select="$Parse-Contract-XML/Resultsets/ResultSet1/Record1/SetFineId"/>
                    </SetFineId>
                    <FineTypeId>
                        <xsl:value-of select="$Parse-Contract-XML/Resultsets/ResultSet1/Record1/FineTypeId"/>
                    </FineTypeId>
                    <Fine>
                        <xsl:value-of select="$Parse-Contract-XML/Resultsets/ResultSet1/Record1/Fine"/>
                    </Fine>
                    <PenyRFRId>
                        <xsl:value-of select="$Parse-Contract-XML/Resultsets/ResultSet1/Record1/PenyRFRId"/>
                    </PenyRFRId>
                    <InvoicePayPeriod>
                        <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/contract/invoicePayPeriod)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/contract/invoicePayPeriod else $Parse-Contract-XML/Resultsets/ResultSet1/Record1/InvoicePayPeriod"/>
                    </InvoicePayPeriod>
                    <BillingCycleCode>
                        <xsl:value-of select="$Parse-Contract-XML/Resultsets/ResultSet1/Record1/BillingCycleCode"/>
                    </BillingCycleCode>
                    <AgreePrivateInfoId>
                        <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/contract/agreePrivateInfoId)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/contract/agreePrivateInfoId else $Parse-Contract-XML/Resultsets/ResultSet1/Record1/AgreePrivateInfoId"/>
                    </AgreePrivateInfoId>
                    <Bank>
                        <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/contract/bank)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/contract/bank else $Parse-Contract-XML/Resultsets/ResultSet1/Record1/Bank"/>
                    </Bank>
                    <Account>
                        <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/contract/account)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/contract/account else $Parse-Contract-XML/Resultsets/ResultSet1/Record1/Account"/>
                    </Account>
                    <BIK>
                        <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/contract/bik)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/contract/bik else $Parse-Contract-XML/Resultsets/ResultSet1/Record1/BIK"/>
                    </BIK>
                    <CorrAccount>
                        <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/contract/corrAccount)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/contract/corrAccount else $Parse-Contract-XML/Resultsets/ResultSet1/Record1/CorrAccount"/>
                    </CorrAccount>
                    <KPP>
                        <xsl:value-of select="$Parse-Contract-XML/Resultsets/ResultSet1/Record1/KPP"/>
                    </KPP>
                    <DealPassport>
                        <xsl:value-of select="$Parse-Contract-XML/Resultsets/ResultSet1/Record1/DealPassport"/>
                    </DealPassport>
                    <FineWarrantNumber>
                        <xsl:value-of select="$Parse-Contract-XML/Resultsets/ResultSet1/Record1/FineWarrantNumber"/>
                    </FineWarrantNumber>
                    <DealBank>
                        <xsl:value-of select="$Parse-Contract-XML/Resultsets/ResultSet1/Record1/DealBank"/>
                    </DealBank>
                    <scalas>
                        <scala>
                            <nbo>
                                <xsl:value-of select="$Parse-BO-JSON/ns:ActivityOutputClass/inputParams/recordId"/>
                            </nbo>
                            <scalan>
                                <xsl:value-of select="$Parse-Scala-JSON/ns:ActivityOutputClass/inputParams/scalaNumber"/>
                            </scalan>
                            <error>
                                <xsl:value-of select="$Parse-BO-JSON/ns:ActivityOutputClass/inputParams/opErrorText"/>
                            </error>
                        </scala>
                    </scalas>
                </contract>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="Contract Update">
            <pd:type>com.tibco.plugin.jdbc.JDBCCallActivity</pd:type>
            <pd:resourceType>ae.activities.JDBCCallActivity</pd:resourceType>
            <pd:x>806</pd:x>
            <pd:y>483</pd:y>
            <config>
                <timeout>%%Timeout%%</timeout>
                <maxRows>100</maxRows>
                <emptyStrAsNil>true</emptyStrAsNil>
                <jdbcSharedConfig>/Connection/MSSQL Connection (SF).sharedjdbc</jdbcSharedConfig>
                <ProcedureName>Contract_CreateUpdateDelete;1</ProcedureName>
                <useSchema>false</useSchema>
                <schema>%%Schema%%</schema>
                <parameterTypes>
                    <parameter>
                        <colName>@RETURN_VALUE</colName>
                        <colType>5</colType>
                        <dataType>4</dataType>
                        <typeName>int</typeName>
                    </parameter>
                    <parameter>
                        <colName>@opType</colName>
                        <colType>1</colType>
                        <dataType>-6</dataType>
                        <typeName>tinyint</typeName>
                    </parameter>
                    <parameter>
                        <colName>@adLogin</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>varchar</typeName>
                    </parameter>
                    <parameter>
                        <colName>@clientID</colName>
                        <colType>1</colType>
                        <dataType>4</dataType>
                        <typeName>int</typeName>
                    </parameter>
                    <parameter>
                        <colName>@contractParams</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>varchar</typeName>
                    </parameter>
                    <parameter>
                        <colName>@recordId</colName>
                        <colType>2</colType>
                        <dataType>4</dataType>
                        <typeName>int</typeName>
                    </parameter>
                    <parameter>
                        <colName>@opResult</colName>
                        <colType>2</colType>
                        <dataType>4</dataType>
                        <typeName>int</typeName>
                    </parameter>
                    <parameter>
                        <colName>@opErrorText</colName>
                        <colType>2</colType>
                        <dataType>12</dataType>
                        <typeName>varchar</typeName>
                    </parameter>
                </parameterTypes>
            </config>
            <pd:inputBindings>
                <inputs>
                    <inputSet>
                        <opType>
                            <xsl:value-of select="2"/>
                        </opType>
                        <adLogin>
                            <xsl:value-of select="$Start/inputParams/adLogin"/>
                        </adLogin>
                        <clientID>
                            <xsl:value-of select="$Parse-Contract-XML/Resultsets/ResultSet1/Record1/ClientId"/>
                        </clientID>
                        <contractParams>
                            <xsl:value-of select="$Render-Contract-XML/xmlString"/>
                        </contractParams>
                        <recordId>
                            <xsl:value-of select="$Parse-Contract-XML/Resultsets/ResultSet1/Record1/Id"/>
                        </recordId>
                        <opResult>
                            <xsl:value-of select="0"/>
                        </opResult>
                        <opErrorText>
                            <xsl:value-of select="0"/>
                        </opErrorText>
                    </inputSet>
                </inputs>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="Client Update">
            <pd:type>com.tibco.plugin.jdbc.JDBCCallActivity</pd:type>
            <pd:resourceType>ae.activities.JDBCCallActivity</pd:resourceType>
            <pd:x>925</pd:x>
            <pd:y>386</pd:y>
            <config>
                <timeout>%%Timeout%%</timeout>
                <maxRows>100</maxRows>
                <emptyStrAsNil>true</emptyStrAsNil>
                <jdbcSharedConfig>/Connection/MSSQL Connection (SF).sharedjdbc</jdbcSharedConfig>
                <ProcedureName>Client_CreateUpdateDelete;1</ProcedureName>
                <useSchema>false</useSchema>
                <schema>%%Schema%%</schema>
                <parameterTypes>
                    <parameter>
                        <colName>@RETURN_VALUE</colName>
                        <colType>5</colType>
                        <dataType>4</dataType>
                        <typeName>int</typeName>
                    </parameter>
                    <parameter>
                        <colName>@opType</colName>
                        <colType>1</colType>
                        <dataType>-6</dataType>
                        <typeName>tinyint</typeName>
                    </parameter>
                    <parameter>
                        <colName>@adLogin</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>varchar</typeName>
                    </parameter>
                    <parameter>
                        <colName>@clientType</colName>
                        <colType>1</colType>
                        <dataType>-6</dataType>
                        <typeName>tinyint</typeName>
                    </parameter>
                    <parameter>
                        <colName>@clientName</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>varchar</typeName>
                    </parameter>
                    <parameter>
                        <colName>@companyBranch</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>varchar</typeName>
                    </parameter>
                    <parameter>
                        <colName>@clientCharacter</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>varchar</typeName>
                    </parameter>
                    <parameter>
                        <colName>@clientInformSource</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>varchar</typeName>
                    </parameter>
                    <parameter>
                        <colName>@clientTrademark</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>varchar</typeName>
                    </parameter>
                    <parameter>
                        <colName>@clientOrgForm</colName>
                        <colType>1</colType>
                        <dataType>4</dataType>
                        <typeName>int</typeName>
                    </parameter>
                    <parameter>
                        <colName>@clientOrgFormIntNum</colName>
                        <colType>1</colType>
                        <dataType>4</dataType>
                        <typeName>int</typeName>
                    </parameter>
                    <parameter>
                        <colName>@SPARKOrgForm</colName>
                        <colType>1</colType>
                        <dataType>4</dataType>
                        <typeName>int</typeName>
                    </parameter>
                    <parameter>
                        <colName>@clientShortName</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>varchar</typeName>
                    </parameter>
                    <parameter>
                        <colName>@inn</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>varchar</typeName>
                    </parameter>
                    <parameter>
                        <colName>@www</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>varchar</typeName>
                    </parameter>
                    <parameter>
                        <colName>@clientDateReg</colName>
                        <colType>1</colType>
                        <dataType>93</dataType>
                        <typeName>datetime</typeName>
                    </parameter>
                    <parameter>
                        <colName>@okvedID</colName>
                        <colType>1</colType>
                        <dataType>4</dataType>
                        <typeName>int</typeName>
                    </parameter>
                    <parameter>
                        <colName>@SPARKokvedID</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>varchar</typeName>
                    </parameter>
                    <parameter>
                        <colName>@ogrn</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>varchar</typeName>
                    </parameter>
                    <parameter>
                        <colName>@okpo</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>varchar</typeName>
                    </parameter>
                    <parameter>
                        <colName>@kpp</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>varchar</typeName>
                    </parameter>
                    <parameter>
                        <colName>@contactFirstName</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>varchar</typeName>
                    </parameter>
                    <parameter>
                        <colName>@contactLastName</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>varchar</typeName>
                    </parameter>
                    <parameter>
                        <colName>@contactMiddleName</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>varchar</typeName>
                    </parameter>
                    <parameter>
                        <colName>@contactPhone</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>varchar</typeName>
                    </parameter>
                    <parameter>
                        <colName>@contactPhone2</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>varchar</typeName>
                    </parameter>
                    <parameter>
                        <colName>@contactEmail</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>varchar</typeName>
                    </parameter>
                    <parameter>
                        <colName>@SPARKIsActive</colName>
                        <colType>1</colType>
                        <dataType>4</dataType>
                        <typeName>int</typeName>
                    </parameter>
                    <parameter>
                        <colName>@SPARKStatusDate</colName>
                        <colType>1</colType>
                        <dataType>91</dataType>
                        <typeName>date</typeName>
                    </parameter>
                    <parameter>
                        <colName>@SPARKStatus</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>varchar</typeName>
                    </parameter>
                    <parameter>
                        <colName>@legalAddrID</colName>
                        <colType>1</colType>
                        <dataType>4</dataType>
                        <typeName>int</typeName>
                    </parameter>
                    <parameter>
                        <colName>@contactAddrID</colName>
                        <colType>1</colType>
                        <dataType>4</dataType>
                        <typeName>int</typeName>
                    </parameter>
                    <parameter>
                        <colName>@operatorConnect</colName>
                        <colType>1</colType>
                        <dataType>-6</dataType>
                        <typeName>tinyint</typeName>
                    </parameter>
                    <parameter>
                        <colName>@operatorConnectType</colName>
                        <colType>1</colType>
                        <dataType>4</dataType>
                        <typeName>int</typeName>
                    </parameter>
                    <parameter>
                        <colName>@SPARKLiqDate</colName>
                        <colType>1</colType>
                        <dataType>91</dataType>
                        <typeName>date</typeName>
                    </parameter>
                    <parameter>
                        <colName>@SPARKCauseLiq</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>varchar</typeName>
                    </parameter>
                    <parameter>
                        <colName>@clientFirstName</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>varchar</typeName>
                    </parameter>
                    <parameter>
                        <colName>@clientLastName</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>varchar</typeName>
                    </parameter>
                    <parameter>
                        <colName>@clientMiddleName</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>varchar</typeName>
                    </parameter>
                    <parameter>
                        <colName>@clientParams</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>varchar</typeName>
                    </parameter>
                    <parameter>
                        <colName>@recordId</colName>
                        <colType>2</colType>
                        <dataType>4</dataType>
                        <typeName>int</typeName>
                    </parameter>
                    <parameter>
                        <colName>@opResult</colName>
                        <colType>2</colType>
                        <dataType>4</dataType>
                        <typeName>int</typeName>
                    </parameter>
                    <parameter>
                        <colName>@opErrorText</colName>
                        <colType>2</colType>
                        <dataType>12</dataType>
                        <typeName>varchar</typeName>
                    </parameter>
                </parameterTypes>
            </config>
            <pd:inputBindings>
                <inputs>
                    <inputSet>
                        <opType>
                            <xsl:value-of select="2"/>
                        </opType>
                        <adLogin>
                            <xsl:value-of select="$Start/inputParams/adLogin"/>
                        </adLogin>
                        <clientType>
                            <xsl:choose>
                                <xsl:when test="exists($Parse-Client-XML/Resultsets/ResultSet1/Record1/ClientType)">
                                    <xsl:value-of select="$Parse-Client-XML/Resultsets/ResultSet1/Record1/ClientType"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </clientType>
                        <clientName>
                            <xsl:choose>
                                <xsl:when test="exists(if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/client/clientName)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/client/clientName else $Parse-Client-XML/Resultsets/ResultSet1/Record1/ClientName)">
                                    <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/client/clientName)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/client/clientName else $Parse-Client-XML/Resultsets/ResultSet1/Record1/ClientName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </clientName>
                        <companyBranch>
                            <xsl:choose>
                                <xsl:when test="exists($Parse-Client-XML/Resultsets/ResultSet1/Record1/MainBranchCode)">
                                    <xsl:value-of select="$Parse-Client-XML/Resultsets/ResultSet1/Record1/MainBranchCode"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </companyBranch>
                        <clientCharacter>
                            <xsl:choose>
                                <xsl:when test="exists($Parse-Client-XML/Resultsets/ResultSet1/Record1/ClientCharacterCode)">
                                    <xsl:value-of select="$Parse-Client-XML/Resultsets/ResultSet1/Record1/ClientCharacterCode"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </clientCharacter>
                        <clientInformSource>
                            <xsl:choose>
                                <xsl:when test="exists($Parse-Client-XML/Resultsets/ResultSet1/Record1/InfSourceCode)">
                                    <xsl:value-of select="$Parse-Client-XML/Resultsets/ResultSet1/Record1/InfSourceCode"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </clientInformSource>
                        <clientTrademark>
                            <xsl:choose>
                                <xsl:when test="exists($Parse-Client-XML/Resultsets/ResultSet1/Record1/Trademark)">
                                    <xsl:value-of select="$Parse-Client-XML/Resultsets/ResultSet1/Record1/Trademark"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </clientTrademark>
                        <clientOrgForm>
                            <xsl:choose>
                                <xsl:when test="exists(if(string-length($Data-Query/resultSet/Record[1]/ID)>0) then 0 else if(string-length($Parse-Client-XML/Resultsets/ResultSet1/Record1/OrgFormID)>0) then $Parse-Client-XML/Resultsets/ResultSet1/Record1/OrgFormID else $Parse-JSON/ns:ActivityOutputClass/inputParams/alwaysNull)">
                                    <xsl:value-of select="if(string-length($Data-Query/resultSet/Record[1]/ID)>0) then 0 else if(string-length($Parse-Client-XML/Resultsets/ResultSet1/Record1/OrgFormID)>0) then $Parse-Client-XML/Resultsets/ResultSet1/Record1/OrgFormID else $Parse-JSON/ns:ActivityOutputClass/inputParams/alwaysNull"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </clientOrgForm>
                        <clientOrgFormIntNum>
                            <xsl:choose>
                                <xsl:when test="exists($Data-Query/resultSet/Record[1]/ID)">
                                    <xsl:value-of select="$Data-Query/resultSet/Record[1]/ID"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </clientOrgFormIntNum>
                        <SPARKOrgForm xsi:nil="true"/>
                        <clientShortName>
                            <xsl:choose>
                                <xsl:when test="exists($Parse-Client-XML/Resultsets/ResultSet1/Record1/ClientShortName)">
                                    <xsl:value-of select="$Parse-Client-XML/Resultsets/ResultSet1/Record1/ClientShortName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </clientShortName>
                        <inn>
                            <xsl:choose>
                                <xsl:when test="exists(if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/client/inn)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/client/inn else $Parse-Client-XML/Resultsets/ResultSet1/Record1/inn)">
                                    <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/client/inn)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/client/inn else $Parse-Client-XML/Resultsets/ResultSet1/Record1/inn"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </inn>
                        <www>
                            <xsl:choose>
                                <xsl:when test="exists($Parse-Client-XML/Resultsets/ResultSet1/Record1/www)">
                                    <xsl:value-of select="$Parse-Client-XML/Resultsets/ResultSet1/Record1/www"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </www>
                        <clientDateReg>
                            <xsl:choose>
                                <xsl:when test="exists(if(string-length($Parse-Client-XML/Resultsets/ResultSet1/Record1/ClientDateReg)>0) then $Parse-Client-XML/Resultsets/ResultSet1/Record1/ClientDateReg else $Parse-JSON/ns:ActivityOutputClass/inputParams/alwaysNull)">
                                    <xsl:value-of select="if(string-length($Parse-Client-XML/Resultsets/ResultSet1/Record1/ClientDateReg)>0) then $Parse-Client-XML/Resultsets/ResultSet1/Record1/ClientDateReg else $Parse-JSON/ns:ActivityOutputClass/inputParams/alwaysNull"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </clientDateReg>
                        <okvedID>
                            <xsl:choose>
                                <xsl:when test="exists(if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/client/okvedCodeID)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/client/okvedCodeID else if(string-length($Parse-Client-XML/Resultsets/ResultSet1/Record1/OKVEDCodeID)>0) then $Parse-Client-XML/Resultsets/ResultSet1/Record1/OKVEDCodeID else $Parse-JSON/ns:ActivityOutputClass/inputParams/alwaysNull)">
                                    <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/client/okvedCodeID)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/client/okvedCodeID else if(string-length($Parse-Client-XML/Resultsets/ResultSet1/Record1/OKVEDCodeID)>0) then $Parse-Client-XML/Resultsets/ResultSet1/Record1/OKVEDCodeID else $Parse-JSON/ns:ActivityOutputClass/inputParams/alwaysNull"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </okvedID>
                        <SPARKokvedID xsi:nil="true"/>
                        <ogrn>
                            <xsl:choose>
                                <xsl:when test="exists($Parse-Client-XML/Resultsets/ResultSet1/Record1/ogrn)">
                                    <xsl:value-of select="$Parse-Client-XML/Resultsets/ResultSet1/Record1/ogrn"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </ogrn>
                        <okpo>
                            <xsl:choose>
                                <xsl:when test="exists($Parse-Client-XML/Resultsets/ResultSet1/Record1/okpo)">
                                    <xsl:value-of select="$Parse-Client-XML/Resultsets/ResultSet1/Record1/okpo"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </okpo>
                        <kpp>
                            <xsl:choose>
                                <xsl:when test="exists($Parse-Client-XML/Resultsets/ResultSet1/Record1/kpp)">
                                    <xsl:value-of select="$Parse-Client-XML/Resultsets/ResultSet1/Record1/kpp"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </kpp>
                        <contactFirstName>
                            <xsl:choose>
                                <xsl:when test="exists($Parse-Client-XML/Resultsets/ResultSet1/Record1/ContactFirstName)">
                                    <xsl:value-of select="$Parse-Client-XML/Resultsets/ResultSet1/Record1/ContactFirstName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </contactFirstName>
                        <contactLastName>
                            <xsl:choose>
                                <xsl:when test="exists($Parse-Client-XML/Resultsets/ResultSet1/Record1/ContactLastName)">
                                    <xsl:value-of select="$Parse-Client-XML/Resultsets/ResultSet1/Record1/ContactLastName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </contactLastName>
                        <contactMiddleName>
                            <xsl:choose>
                                <xsl:when test="exists($Parse-Client-XML/Resultsets/ResultSet1/Record1/ContactMiddleName)">
                                    <xsl:value-of select="$Parse-Client-XML/Resultsets/ResultSet1/Record1/ContactMiddleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </contactMiddleName>
                        <contactPhone>
                            <xsl:choose>
                                <xsl:when test="exists($Parse-Client-XML/Resultsets/ResultSet1/Record1/ContactPhone)">
                                    <xsl:value-of select="$Parse-Client-XML/Resultsets/ResultSet1/Record1/ContactPhone"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </contactPhone>
                        <contactPhone2>
                            <xsl:choose>
                                <xsl:when test="exists($Parse-Client-XML/Resultsets/ResultSet1/Record1/ContactPhone2)">
                                    <xsl:value-of select="$Parse-Client-XML/Resultsets/ResultSet1/Record1/ContactPhone2"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </contactPhone2>
                        <contactEmail>
                            <xsl:choose>
                                <xsl:when test="exists($Parse-Client-XML/Resultsets/ResultSet1/Record1/ContactEmail)">
                                    <xsl:value-of select="$Parse-Client-XML/Resultsets/ResultSet1/Record1/ContactEmail"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </contactEmail>
                        <SPARKIsActive>
                            <xsl:choose>
                                <xsl:when test="exists(if(string-length($Parse-Client-XML/Resultsets/ResultSet1/Record1/SPARKIsActive)>0) then $Parse-Client-XML/Resultsets/ResultSet1/Record1/SPARKIsActive else $Parse-JSON/ns:ActivityOutputClass/inputParams/alwaysNull)">
                                    <xsl:value-of select="if(string-length($Parse-Client-XML/Resultsets/ResultSet1/Record1/SPARKIsActive)>0) then $Parse-Client-XML/Resultsets/ResultSet1/Record1/SPARKIsActive else $Parse-JSON/ns:ActivityOutputClass/inputParams/alwaysNull"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </SPARKIsActive>
                        <SPARKStatusDate>
                            <xsl:choose>
                                <xsl:when test="exists(if(string-length($Parse-Client-XML/Resultsets/ResultSet1/Record1/SPARKStatusDate)>0) then tib:create-date(&#xA;tib:get-year-from-dateTime($Parse-Client-XML/Resultsets/ResultSet1/Record1/SPARKStatusDate),&#xA;tib:get-month-from-dateTime($Parse-Client-XML/Resultsets/ResultSet1/Record1/SPARKStatusDate),&#xA;tib:get-day-from-dateTime($Parse-Client-XML/Resultsets/ResultSet1/Record1/SPARKStatusDate)&#xA;) else $Parse-JSON/ns:ActivityOutputClass/inputParams/alwaysNull)">
                                    <xsl:value-of select="if(string-length($Parse-Client-XML/Resultsets/ResultSet1/Record1/SPARKStatusDate)>0) then tib:create-date(&#xA;tib:get-year-from-dateTime($Parse-Client-XML/Resultsets/ResultSet1/Record1/SPARKStatusDate),&#xA;tib:get-month-from-dateTime($Parse-Client-XML/Resultsets/ResultSet1/Record1/SPARKStatusDate),&#xA;tib:get-day-from-dateTime($Parse-Client-XML/Resultsets/ResultSet1/Record1/SPARKStatusDate)&#xA;) else $Parse-JSON/ns:ActivityOutputClass/inputParams/alwaysNull"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </SPARKStatusDate>
                        <SPARKStatus>
                            <xsl:choose>
                                <xsl:when test="exists($Parse-Client-XML/Resultsets/ResultSet1/Record1/SPARKStatus)">
                                    <xsl:value-of select="$Parse-Client-XML/Resultsets/ResultSet1/Record1/SPARKStatus"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </SPARKStatus>
                        <legalAddrID>
                            <xsl:choose>
                                <xsl:when test="exists(if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/client/legalAddressId)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/client/legalAddressId else if(string-length($Parse-Client-XML/Resultsets/ResultSet1/Record1/LegalAddressId)>0) then $Parse-Client-XML/Resultsets/ResultSet1/Record1/LegalAddressId else $Parse-JSON/ns:ActivityOutputClass/inputParams/alwaysNull)">
                                    <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/client/legalAddressId)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/client/legalAddressId else if(string-length($Parse-Client-XML/Resultsets/ResultSet1/Record1/LegalAddressId)>0) then $Parse-Client-XML/Resultsets/ResultSet1/Record1/LegalAddressId else $Parse-JSON/ns:ActivityOutputClass/inputParams/alwaysNull"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </legalAddrID>
                        <contactAddrID>
                            <xsl:choose>
                                <xsl:when test="exists(if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/client/contactAddressId)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/client/contactAddressId else if(string-length($Parse-Client-XML/Resultsets/ResultSet1/Record1/ContactAddressId)>0) then $Parse-Client-XML/Resultsets/ResultSet1/Record1/ContactAddressId else $Parse-JSON/ns:ActivityOutputClass/inputParams/alwaysNull)">
                                    <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/client/contactAddressId)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/client/contactAddressId else if(string-length($Parse-Client-XML/Resultsets/ResultSet1/Record1/ContactAddressId)>0) then $Parse-Client-XML/Resultsets/ResultSet1/Record1/ContactAddressId else $Parse-JSON/ns:ActivityOutputClass/inputParams/alwaysNull"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </contactAddrID>
                        <operatorConnect>
                            <xsl:choose>
                                <xsl:when test="exists(if(string-length($Parse-Client-XML/Resultsets/ResultSet1/Record1/OperatorConnect)>0) then $Parse-Client-XML/Resultsets/ResultSet1/Record1/OperatorConnect else $Parse-JSON/ns:ActivityOutputClass/inputParams/alwaysNull)">
                                    <xsl:value-of select="if(string-length($Parse-Client-XML/Resultsets/ResultSet1/Record1/OperatorConnect)>0) then $Parse-Client-XML/Resultsets/ResultSet1/Record1/OperatorConnect else $Parse-JSON/ns:ActivityOutputClass/inputParams/alwaysNull"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </operatorConnect>
                        <operatorConnectType>
                            <xsl:choose>
                                <xsl:when test="exists(if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/client/carrierTypeId)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/client/carrierTypeId else if(string-length($Parse-Client-XML/Resultsets/ResultSet1/Record1/CarrierTypeId)>0) then $Parse-Client-XML/Resultsets/ResultSet1/Record1/CarrierTypeId else $Parse-JSON/ns:ActivityOutputClass/inputParams/alwaysNull)">
                                    <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/client/carrierTypeId)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/client/carrierTypeId else if(string-length($Parse-Client-XML/Resultsets/ResultSet1/Record1/CarrierTypeId)>0) then $Parse-Client-XML/Resultsets/ResultSet1/Record1/CarrierTypeId else $Parse-JSON/ns:ActivityOutputClass/inputParams/alwaysNull"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </operatorConnectType>
                        <SPARKLiqDate>
                            <xsl:choose>
                                <xsl:when test="exists(if(string-length($Parse-Client-XML/Resultsets/ResultSet1/Record1/SPARKLiquidationDate)>0) then tib:create-date(&#xA;tib:get-year-from-dateTime($Parse-Client-XML/Resultsets/ResultSet1/Record1/SPARKLiquidationDate),&#xA;tib:get-month-from-dateTime($Parse-Client-XML/Resultsets/ResultSet1/Record1/SPARKLiquidationDate),&#xA;tib:get-day-from-dateTime($Parse-Client-XML/Resultsets/ResultSet1/Record1/SPARKLiquidationDate)&#xA;) else $Parse-JSON/ns:ActivityOutputClass/inputParams/alwaysNull)">
                                    <xsl:value-of select="if(string-length($Parse-Client-XML/Resultsets/ResultSet1/Record1/SPARKLiquidationDate)>0) then tib:create-date(&#xA;tib:get-year-from-dateTime($Parse-Client-XML/Resultsets/ResultSet1/Record1/SPARKLiquidationDate),&#xA;tib:get-month-from-dateTime($Parse-Client-XML/Resultsets/ResultSet1/Record1/SPARKLiquidationDate),&#xA;tib:get-day-from-dateTime($Parse-Client-XML/Resultsets/ResultSet1/Record1/SPARKLiquidationDate)&#xA;) else $Parse-JSON/ns:ActivityOutputClass/inputParams/alwaysNull"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </SPARKLiqDate>
                        <SPARKCauseLiq>
                            <xsl:choose>
                                <xsl:when test="exists($Parse-Client-XML/Resultsets/ResultSet1/Record1/SPARKCauseLiquidation)">
                                    <xsl:value-of select="$Parse-Client-XML/Resultsets/ResultSet1/Record1/SPARKCauseLiquidation"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </SPARKCauseLiq>
                        <clientFirstName>
                            <xsl:choose>
                                <xsl:when test="exists($Parse-Client-XML/Resultsets/ResultSet1/Record1/ClientFirstName)">
                                    <xsl:value-of select="$Parse-Client-XML/Resultsets/ResultSet1/Record1/ClientFirstName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </clientFirstName>
                        <clientLastName>
                            <xsl:choose>
                                <xsl:when test="exists($Parse-Client-XML/Resultsets/ResultSet1/Record1/ClientLastName)">
                                    <xsl:value-of select="$Parse-Client-XML/Resultsets/ResultSet1/Record1/ClientLastName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </clientLastName>
                        <clientMiddleName>
                            <xsl:choose>
                                <xsl:when test="exists($Parse-Client-XML/Resultsets/ResultSet1/Record1/ClientMiddleName)">
                                    <xsl:value-of select="$Parse-Client-XML/Resultsets/ResultSet1/Record1/ClientMiddleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </clientMiddleName>
                        <clientParams>
                            <xsl:choose>
                                <xsl:when test="exists($Render-Client-XML/xmlString)">
                                    <xsl:value-of select="$Render-Client-XML/xmlString"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </clientParams>
                        <recordId>
                            <xsl:value-of select="$Parse-Client-XML/Resultsets/ResultSet1/Record1/ClientID"/>
                        </recordId>
                        <opResult>
                            <xsl:value-of select="0"/>
                        </opResult>
                        <opErrorText>
                            <xsl:value-of select="&quot;&quot;"/>
                        </opErrorText>
                    </inputSet>
                </inputs>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="Render Client XML">
            <pd:type>com.tibco.plugin.xml.XMLRendererActivity</pd:type>
            <pd:resourceType>ae.activities.XMLRendererActivity</pd:resourceType>
            <pd:x>926</pd:x>
            <pd:y>483</pd:y>
            <config>
                <renderAsText>text</renderAsText>
                <validateInput>false</validateInput>
                <textEncoding>windows-1251</textEncoding>
                <term>
                    <xsd:element name="client">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="scalas">
                                    <xsd:complexType>
                                        <xsd:sequence>
                                            <xsd:element name="scala">
                                                <xsd:complexType>
                                                    <xsd:sequence>
                                                        <xsd:element name="nbo" type="xsd:string"/>
                                                        <xsd:element name="scalan" type="xsd:string"/>
                                                        <xsd:element name="error" type="xsd:string"/>
                                                    </xsd:sequence>
                                                </xsd:complexType>
                                            </xsd:element>
                                        </xsd:sequence>
                                    </xsd:complexType>
                                </xsd:element>
                            </xsd:sequence>
                        </xsd:complexType>
                    </xsd:element>
                </term>
            </config>
            <pd:inputBindings>
                <client>
                    <scalas>
                        <scala>
                            <nbo>
                                <xsl:value-of select="$Parse-BO-JSON/ns:ActivityOutputClass/inputParams/recordId"/>
                            </nbo>
                            <scalan>
                                <xsl:value-of select="$Parse-Scala-JSON/ns:ActivityOutputClass/inputParams/scalaNumber"/>
                            </scalan>
                            <error>
                                <xsl:value-of select="$Parse-BO-JSON/ns:ActivityOutputClass/inputParams/opErrorText"/>
                            </error>
                        </scala>
                    </scalas>
                </client>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="Generate-Error-1">
            <pd:type>com.tibco.pe.core.GenerateErrorActivity</pd:type>
            <pd:resourceType>ae.activities.throw</pd:resourceType>
            <pd:x>693</pd:x>
            <pd:y>388</pd:y>
            <config>
                <faultName/>
            </config>
            <pd:inputBindings>
                <ns0:ActivityInput xmlns:ns0="http://www.tibco.com/pe/GenerateErrorActivity/InputSchema">
                    <xsl:if test="not(($Scala-Update/resultSet/outputSet/opErrorText/@xsi:nil=(&quot;true&quot;)) or ($Scala-Update/resultSet/outputSet/opErrorText/@xsi:nil=(&quot;1&quot;)))">
                        <message>
                            <xsl:value-of select="$Scala-Update/resultSet/outputSet/opErrorText"/>
                        </message>
                    </xsl:if>
                    <xsl:if test="not(($Scala-Update/resultSet/outputSet/opResult/@xsi:nil=(&quot;true&quot;)) or ($Scala-Update/resultSet/outputSet/opResult/@xsi:nil=(&quot;1&quot;)))">
                        <messageCode>
                            <xsl:value-of select="$Scala-Update/resultSet/outputSet/opResult"/>
                        </messageCode>
                    </xsl:if>
                </ns0:ActivityInput>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="Generate-Error-2">
            <pd:type>com.tibco.pe.core.GenerateErrorActivity</pd:type>
            <pd:resourceType>ae.activities.throw</pd:resourceType>
            <pd:x>693</pd:x>
            <pd:y>482</pd:y>
            <config>
                <faultName/>
            </config>
            <pd:inputBindings>
                <ns0:ActivityInput xmlns:ns0="http://www.tibco.com/pe/GenerateErrorActivity/InputSchema">
                    <xsl:if test="not(($Contract-Update/resultSet/outputSet/opErrorText/@xsi:nil=(&quot;true&quot;)) or ($Contract-Update/resultSet/outputSet/opErrorText/@xsi:nil=(&quot;1&quot;)))">
                        <message>
                            <xsl:value-of select="$Contract-Update/resultSet/outputSet/opErrorText"/>
                        </message>
                    </xsl:if>
                    <xsl:if test="not(($Contract-Update/resultSet/outputSet/opResult/@xsi:nil=(&quot;true&quot;)) or ($Contract-Update/resultSet/outputSet/opResult/@xsi:nil=(&quot;1&quot;)))">
                        <messageCode>
                            <xsl:value-of select="$Contract-Update/resultSet/outputSet/opResult"/>
                        </messageCode>
                    </xsl:if>
                </ns0:ActivityInput>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="Generate-Error-3">
            <pd:type>com.tibco.pe.core.GenerateErrorActivity</pd:type>
            <pd:resourceType>ae.activities.throw</pd:resourceType>
            <pd:x>925</pd:x>
            <pd:y>275</pd:y>
            <config>
                <faultName/>
            </config>
            <pd:inputBindings>
                <ns0:ActivityInput xmlns:ns0="http://www.tibco.com/pe/GenerateErrorActivity/InputSchema">
                    <xsl:if test="not(($Client-Update/resultSet/outputSet/opErrorText/@xsi:nil=(&quot;true&quot;)) or ($Client-Update/resultSet/outputSet/opErrorText/@xsi:nil=(&quot;1&quot;)))">
                        <message>
                            <xsl:value-of select="$Client-Update/resultSet/outputSet/opErrorText"/>
                        </message>
                    </xsl:if>
                    <xsl:if test="not(($Client-Update/resultSet/outputSet/opResult/@xsi:nil=(&quot;true&quot;)) or ($Client-Update/resultSet/outputSet/opResult/@xsi:nil=(&quot;1&quot;)))">
                        <messageCode>
                            <xsl:value-of select="$Client-Update/resultSet/outputSet/opResult"/>
                        </messageCode>
                    </xsl:if>
                </ns0:ActivityInput>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="Data Query">
            <pd:type>com.tibco.plugin.jdbc.JDBCQueryActivity</pd:type>
            <pd:resourceType>ae.activities.JDBCQueryActivity</pd:resourceType>
            <pd:x>253</pd:x>
            <pd:y>388</pd:y>
            <config>
                <timeout>%%Timeout%%</timeout>
                <commit>false</commit>
                <maxRows>10000</maxRows>
                <emptyStrAsNil>false</emptyStrAsNil>
                <jdbcSharedConfig>/Connection/MSSQL Connection (SF).sharedjdbc</jdbcSharedConfig>
                <statement>SELECT ID FROM [%%Schema%%].[v_ClientOrgForm] WHERE intNum = ?
</statement>
                <Prepared_Param_DataType>
                    <parameter>
                        <parameterName>intNum</parameterName>
                        <dataType>INTEGER</dataType>
                    </parameter>
                </Prepared_Param_DataType>
                <oraObjects/>
                <oraTables/>
                <QueryOutputCachedSchemaColumns>ID</QueryOutputCachedSchemaColumns>
                <QueryOutputCachedSchemaDataTypes>4</QueryOutputCachedSchemaDataTypes>
                <QueryOutputCachedSchemaDataTypesName>int</QueryOutputCachedSchemaDataTypesName>
                <QueryOutputCachedSchemaStatus>OptionalElement</QueryOutputCachedSchemaStatus>
            </config>
            <pd:inputBindings>
                <jdbcQueryActivityInput>
                    <intNum>
                        <xsl:choose>
                            <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/inputParams/client/orgFormIntNum)">
                                <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/inputParams/client/orgFormIntNum"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:attribute name="xsi:nil">true</xsl:attribute>
                            </xsl:otherwise>
                        </xsl:choose>
                    </intNum>
                </jdbcQueryActivityInput>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="Deal Update">
            <pd:type>com.tibco.plugin.jdbc.JDBCCallActivity</pd:type>
            <pd:resourceType>ae.activities.JDBCCallActivity</pd:resourceType>
            <pd:x>352</pd:x>
            <pd:y>387</pd:y>
            <config>
                <timeout>%%Timeout%%</timeout>
                <maxRows>100</maxRows>
                <emptyStrAsNil>false</emptyStrAsNil>
                <jdbcSharedConfig>/Connection/MSSQL Connection (SF).sharedjdbc</jdbcSharedConfig>
                <ProcedureName>Opportunity_CreateUpdateDelete;1</ProcedureName>
                <useSchema>false</useSchema>
                <schema>%%Schema%%</schema>
                <parameterTypes>
                    <parameter>
                        <colName>@RETURN_VALUE</colName>
                        <colType>5</colType>
                        <dataType>4</dataType>
                        <typeName>int</typeName>
                    </parameter>
                    <parameter>
                        <colName>@opType</colName>
                        <colType>1</colType>
                        <dataType>-6</dataType>
                        <typeName>tinyint</typeName>
                    </parameter>
                    <parameter>
                        <colName>@adLogin</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>varchar</typeName>
                    </parameter>
                    <parameter>
                        <colName>@clientID</colName>
                        <colType>1</colType>
                        <dataType>4</dataType>
                        <typeName>int</typeName>
                    </parameter>
                    <parameter>
                        <colName>@oppType1</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>varchar</typeName>
                    </parameter>
                    <parameter>
                        <colName>@oppType2</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>varchar</typeName>
                    </parameter>
                    <parameter>
                        <colName>@oppPriority</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>varchar</typeName>
                    </parameter>
                    <parameter>
                        <colName>@saleProc</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>varchar</typeName>
                    </parameter>
                    <parameter>
                        <colName>@saleStep</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>varchar</typeName>
                    </parameter>
                    <parameter>
                        <colName>@projContactID</colName>
                        <colType>1</colType>
                        <dataType>4</dataType>
                        <typeName>int</typeName>
                    </parameter>
                    <parameter>
                        <colName>@projComment</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>varchar</typeName>
                    </parameter>
                    <parameter>
                        <colName>@projNumber</colName>
                        <colType>1</colType>
                        <dataType>4</dataType>
                        <typeName>int</typeName>
                    </parameter>
                    <parameter>
                        <colName>@procStep</colName>
                        <colType>1</colType>
                        <dataType>-6</dataType>
                        <typeName>tinyint</typeName>
                    </parameter>
                    <parameter>
                        <colName>@procStepObjID</colName>
                        <colType>1</colType>
                        <dataType>4</dataType>
                        <typeName>int</typeName>
                    </parameter>
                    <parameter>
                        <colName>@contractID</colName>
                        <colType>1</colType>
                        <dataType>4</dataType>
                        <typeName>int</typeName>
                    </parameter>
                    <parameter>
                        <colName>@scalaID</colName>
                        <colType>1</colType>
                        <dataType>4</dataType>
                        <typeName>int</typeName>
                    </parameter>
                    <parameter>
                        <colName>@plannedFinishDate</colName>
                        <colType>1</colType>
                        <dataType>93</dataType>
                        <typeName>datetime</typeName>
                    </parameter>
                    <parameter>
                        <colName>@recordId</colName>
                        <colType>2</colType>
                        <dataType>4</dataType>
                        <typeName>int</typeName>
                    </parameter>
                    <parameter>
                        <colName>@opResult</colName>
                        <colType>2</colType>
                        <dataType>4</dataType>
                        <typeName>int</typeName>
                    </parameter>
                    <parameter>
                        <colName>@opErrorText</colName>
                        <colType>2</colType>
                        <dataType>12</dataType>
                        <typeName>varchar</typeName>
                    </parameter>
                </parameterTypes>
            </config>
            <pd:inputBindings>
                <inputs>
                    <inputSet>
                        <opType>
                            <xsl:value-of select="2"/>
                        </opType>
                        <adLogin>
                            <xsl:value-of select="$Start/inputParams/adLogin"/>
                        </adLogin>
                        <clientID>
                            <xsl:choose>
                                <xsl:when test="exists(if(string-length($Parse-Deal-JSON/ns:ActivityOutputClass/opportunity/clientID)>0) then $Parse-Deal-JSON/ns:ActivityOutputClass/opportunity/clientID else $Parse-JSON/ns:ActivityOutputClass/inputParams/alwaysNull)">
                                    <xsl:value-of select="if(string-length($Parse-Deal-JSON/ns:ActivityOutputClass/opportunity/clientID)>0) then $Parse-Deal-JSON/ns:ActivityOutputClass/opportunity/clientID else $Parse-JSON/ns:ActivityOutputClass/inputParams/alwaysNull"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </clientID>
                        <oppType1>
                            <xsl:choose>
                                <xsl:when test="exists($Parse-Deal-JSON/ns:ActivityOutputClass/opportunity/type1)">
                                    <xsl:value-of select="$Parse-Deal-JSON/ns:ActivityOutputClass/opportunity/type1"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </oppType1>
                        <oppType2>
                            <xsl:choose>
                                <xsl:when test="exists($Parse-Deal-JSON/ns:ActivityOutputClass/opportunity/type2)">
                                    <xsl:value-of select="$Parse-Deal-JSON/ns:ActivityOutputClass/opportunity/type2"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </oppType2>
                        <oppPriority>
                            <xsl:choose>
                                <xsl:when test="exists($Parse-Deal-JSON/ns:ActivityOutputClass/opportunity/priority)">
                                    <xsl:value-of select="$Parse-Deal-JSON/ns:ActivityOutputClass/opportunity/priority"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </oppPriority>
                        <saleProc>
                            <xsl:choose>
                                <xsl:when test="exists($Parse-Deal-JSON/ns:ActivityOutputClass/opportunity/saleProc)">
                                    <xsl:value-of select="$Parse-Deal-JSON/ns:ActivityOutputClass/opportunity/saleProc"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </saleProc>
                        <saleStep>
                            <xsl:choose>
                                <xsl:when test="exists($Parse-Deal-JSON/ns:ActivityOutputClass/opportunity/saleStep)">
                                    <xsl:value-of select="$Parse-Deal-JSON/ns:ActivityOutputClass/opportunity/saleStep"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </saleStep>
                        <projContactID>
                            <xsl:choose>
                                <xsl:when test="exists(if(string-length($Parse-Deal-JSON/ns:ActivityOutputClass/opportunity/projectContactID)>0) then $Parse-Deal-JSON/ns:ActivityOutputClass/opportunity/projectContactID else $Parse-JSON/ns:ActivityOutputClass/inputParams/alwaysNull)">
                                    <xsl:value-of select="if(string-length($Parse-Deal-JSON/ns:ActivityOutputClass/opportunity/projectContactID)>0) then $Parse-Deal-JSON/ns:ActivityOutputClass/opportunity/projectContactID else $Parse-JSON/ns:ActivityOutputClass/inputParams/alwaysNull"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </projContactID>
                        <projComment>
                            <xsl:choose>
                                <xsl:when test="exists($Parse-Deal-JSON/ns:ActivityOutputClass/opportunity/projectComment)">
                                    <xsl:value-of select="$Parse-Deal-JSON/ns:ActivityOutputClass/opportunity/projectComment"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </projComment>
                        <projNumber>
                            <xsl:choose>
                                <xsl:when test="exists(if(string-length($Parse-Deal-JSON/ns:ActivityOutputClass/opportunity/projectNumber)>0) then $Parse-Deal-JSON/ns:ActivityOutputClass/opportunity/projectNumber else $Parse-JSON/ns:ActivityOutputClass/inputParams/alwaysNull)">
                                    <xsl:value-of select="if(string-length($Parse-Deal-JSON/ns:ActivityOutputClass/opportunity/projectNumber)>0) then $Parse-Deal-JSON/ns:ActivityOutputClass/opportunity/projectNumber else $Parse-JSON/ns:ActivityOutputClass/inputParams/alwaysNull"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </projNumber>
                        <procStep>
                            <xsl:choose>
                                <xsl:when test="exists(if(string-length($Parse-Deal-JSON/ns:ActivityOutputClass/opportunity/proccessStep)>0) then $Parse-Deal-JSON/ns:ActivityOutputClass/opportunity/proccessStep else $Parse-JSON/ns:ActivityOutputClass/inputParams/alwaysNull)">
                                    <xsl:value-of select="if(string-length($Parse-Deal-JSON/ns:ActivityOutputClass/opportunity/proccessStep)>0) then $Parse-Deal-JSON/ns:ActivityOutputClass/opportunity/proccessStep else $Parse-JSON/ns:ActivityOutputClass/inputParams/alwaysNull"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </procStep>
                        <procStepObjID>
                            <xsl:choose>
                                <xsl:when test="exists(if(string-length($Parse-Deal-JSON/ns:ActivityOutputClass/opportunity/proccessStepObjID)>0) then $Parse-Deal-JSON/ns:ActivityOutputClass/opportunity/proccessStepObjID else $Parse-JSON/ns:ActivityOutputClass/inputParams/alwaysNull)">
                                    <xsl:value-of select="if(string-length($Parse-Deal-JSON/ns:ActivityOutputClass/opportunity/proccessStepObjID)>0) then $Parse-Deal-JSON/ns:ActivityOutputClass/opportunity/proccessStepObjID else $Parse-JSON/ns:ActivityOutputClass/inputParams/alwaysNull"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </procStepObjID>
                        <contractID>
                            <xsl:choose>
                                <xsl:when test="exists(if(string-length($Parse-Deal-JSON/ns:ActivityOutputClass/opportunity/contractID)>0) then $Parse-Deal-JSON/ns:ActivityOutputClass/opportunity/contractID else $Parse-JSON/ns:ActivityOutputClass/inputParams/alwaysNull)">
                                    <xsl:value-of select="if(string-length($Parse-Deal-JSON/ns:ActivityOutputClass/opportunity/contractID)>0) then $Parse-Deal-JSON/ns:ActivityOutputClass/opportunity/contractID else $Parse-JSON/ns:ActivityOutputClass/inputParams/alwaysNull"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </contractID>
                        <scalaID>
                            <xsl:choose>
                                <xsl:when test="exists(if(string-length($Parse-Deal-JSON/ns:ActivityOutputClass/opportunity/scalaID)>0) then $Parse-Deal-JSON/ns:ActivityOutputClass/opportunity/scalaID else $Parse-JSON/ns:ActivityOutputClass/inputParams/alwaysNull)">
                                    <xsl:value-of select="if(string-length($Parse-Deal-JSON/ns:ActivityOutputClass/opportunity/scalaID)>0) then $Parse-Deal-JSON/ns:ActivityOutputClass/opportunity/scalaID else $Parse-JSON/ns:ActivityOutputClass/inputParams/alwaysNull"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </scalaID>
                        <plannedFinishDate>
                            <xsl:choose>
                                <xsl:when test="exists(if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/plannedFinishDate)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/plannedFinishDate else $Parse-JSON/ns:ActivityOutputClass/inputParams/alwaysNull)">
                                    <xsl:value-of select="if(string-length($Parse-JSON/ns:ActivityOutputClass/inputParams/plannedFinishDate)>0) then $Parse-JSON/ns:ActivityOutputClass/inputParams/plannedFinishDate else $Parse-JSON/ns:ActivityOutputClass/inputParams/alwaysNull"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </plannedFinishDate>
                        <recordId>
                            <xsl:value-of select="$Parse-Deal-JSON/ns:ActivityOutputClass/opportunity/id"/>
                        </recordId>
                        <opResult>
                            <xsl:value-of select="0"/>
                        </opResult>
                        <opErrorText>
                            <xsl:value-of select="0"/>
                        </opErrorText>
                    </inputSet>
                </inputs>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="Generate-Error-4">
            <pd:type>com.tibco.pe.core.GenerateErrorActivity</pd:type>
            <pd:resourceType>ae.activities.throw</pd:resourceType>
            <pd:x>488</pd:x>
            <pd:y>272</pd:y>
            <config>
                <faultName/>
            </config>
            <pd:inputBindings>
                <ns1:ActivityInput>
                    <xsl:if test="$Deal-Update/resultSet/outputSet/opErrorText">
                        <message>
                            <xsl:value-of select="$Deal-Update/resultSet/outputSet/opErrorText"/>
                        </message>
                    </xsl:if>
                    <xsl:if test="$Deal-Update/resultSet/outputSet/opResult">
                        <messageCode>
                            <xsl:value-of select="$Deal-Update/resultSet/outputSet/opResult"/>
                        </messageCode>
                    </xsl:if>
                </ns1:ActivityInput>
            </pd:inputBindings>
        </pd:activity>
    </pd:group>
    <pd:activity name="Generate Project Number Error">
        <pd:type>com.tibco.pe.core.GenerateErrorActivity</pd:type>
        <pd:resourceType>ae.activities.throw</pd:resourceType>
        <pd:x>320</pd:x>
        <pd:y>166</pd:y>
        <config>
            <faultName/>
        </config>
        <pd:inputBindings>
            <ns1:ActivityInput>
                <message>
                    <xsl:value-of select="'Project number not found in deal'"/>
                </message>
                <messageCode>
                    <xsl:value-of select="1"/>
                </messageCode>
            </ns1:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Generate Scala Error">
        <pd:type>com.tibco.pe.core.GenerateErrorActivity</pd:type>
        <pd:resourceType>ae.activities.throw</pd:resourceType>
        <pd:x>226</pd:x>
        <pd:y>166</pd:y>
        <config>
            <faultName/>
        </config>
        <pd:inputBindings>
            <ns1:ActivityInput>
                <message>
                    <xsl:value-of select="'Scala not found in deal'"/>
                </message>
                <messageCode>
                    <xsl:value-of select="1"/>
                </messageCode>
            </ns1:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Get HRMS EmpNo">
        <pd:type>com.tibco.plugin.jdbc.JDBCQueryActivity</pd:type>
        <pd:resourceType>ae.activities.JDBCQueryActivity</pd:resourceType>
        <pd:x>606</pd:x>
        <pd:y>54</pd:y>
        <config>
            <timeout>%%Timeout%%</timeout>
            <commit>false</commit>
            <maxRows>10000</maxRows>
            <emptyStrAsNil>false</emptyStrAsNil>
            <jdbcSharedConfig>/Connection/MSSQL Connection (SF).sharedjdbc</jdbcSharedConfig>
            <statement>SELECT [HRMS_EMPLOYEE_ID] FROM [dbo].[Employee] WHERE [NFS_Emp_Id] = ?
</statement>
            <Prepared_Param_DataType>
                <parameter>
                    <parameterName>empNo</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
            </Prepared_Param_DataType>
            <oraObjects/>
            <oraTables/>
            <QueryOutputCachedSchemaColumns>HRMS_EMPLOYEE_ID</QueryOutputCachedSchemaColumns>
            <QueryOutputCachedSchemaDataTypes>4</QueryOutputCachedSchemaDataTypes>
            <QueryOutputCachedSchemaDataTypesName>int</QueryOutputCachedSchemaDataTypesName>
            <QueryOutputCachedSchemaStatus>OptionalElement</QueryOutputCachedSchemaStatus>
        </config>
        <pd:inputBindings>
            <jdbcQueryActivityInput>
                <empNo>
                    <xsl:value-of select="$Start/inputParams/empNo"/>
                </empNo>
            </jdbcQueryActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="SndBoF Mapping">
        <pd:type>com.tibco.plugin.jdbc.JDBCQueryActivity</pd:type>
        <pd:resourceType>ae.activities.JDBCQueryActivity</pd:resourceType>
        <pd:x>59</pd:x>
        <pd:y>238</pd:y>
        <config>
            <timeout>%%Timeout%%</timeout>
            <commit>false</commit>
            <maxRows>10000</maxRows>
            <emptyStrAsNil>false</emptyStrAsNil>
            <jdbcSharedConfig>/Connection/MSSQL Connection (SF).sharedjdbc</jdbcSharedConfig>
            <statement>SELECT i_nbo, i_usr_cd FROM [%%Schema%%].[BillingOrder_snd_bo_f_Mapping] (?, ?)
</statement>
            <Prepared_Param_DataType>
                <parameter>
                    <parameterName>oppID</parameterName>
                    <dataType>BIGINT</dataType>
                </parameter>
                <parameter>
                    <parameterName>adLogin</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
            </Prepared_Param_DataType>
            <oraObjects/>
            <oraTables/>
            <QueryOutputCachedSchemaColumns>i_nbo</QueryOutputCachedSchemaColumns>
            <QueryOutputCachedSchemaDataTypes>4</QueryOutputCachedSchemaDataTypes>
            <QueryOutputCachedSchemaDataTypesName>int</QueryOutputCachedSchemaDataTypesName>
            <QueryOutputCachedSchemaStatus>OptionalElement</QueryOutputCachedSchemaStatus>
            <QueryOutputCachedSchemaColumns>i_usr_cd</QueryOutputCachedSchemaColumns>
            <QueryOutputCachedSchemaDataTypes>4</QueryOutputCachedSchemaDataTypes>
            <QueryOutputCachedSchemaDataTypesName>int</QueryOutputCachedSchemaDataTypesName>
            <QueryOutputCachedSchemaStatus>OptionalElement</QueryOutputCachedSchemaStatus>
        </config>
        <pd:inputBindings>
            <jdbcQueryActivityInput>
                <oppID>
                    <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/inputParams/dealID"/>
                </oppID>
                <adLogin>
                    <xsl:value-of select="$Start/inputParams/adLogin"/>
                </adLogin>
            </jdbcQueryActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:group name="Iteration">
        <pd:type>com.tibco.pe.core.LoopGroup</pd:type>
        <pd:resourceType>ae.process.group</pd:resourceType>
        <pd:x>5</pd:x>
        <pd:y>301</pd:y>
        <pd:width>191</pd:width>
        <pd:height>247</pd:height>
        <pd:collapsedWidth>57</pd:collapsedWidth>
        <pd:collapsedHeight>70</pd:collapsedHeight>
        <pd:groupVariables/>
        <pd:joinToggle>inherit</pd:joinToggle>
        <config>
            <pd:groupType>inputLoop</pd:groupType>
            <pd:serializable>false</pd:serializable>
            <pd:over>$SndBoF-Mapping/resultSet/Record</pd:over>
            <pd:indexSlot>i</pd:indexSlot>
            <pd:activityOutputName/>
            <pd:accumulateOutput>false</pd:accumulateOutput>
        </config>
        <pd:inputBindings/>
        <pd:expanded>true</pd:expanded>
        <pd:transition>
            <pd:from>start</pd:from>
            <pd:to>SndBoF</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>SndBoF</pd:from>
            <pd:to>end</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>otherwise</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>SndBoF</pd:from>
            <pd:to>Generate-Error-5</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>xpath</pd:conditionType>
            <pd:xpath>$SndBoF/resultSet/outputSet/RETURN_VALUE !=1</pd:xpath>
        </pd:transition>
        <pd:activity name="SndBoF">
            <pd:type>com.tibco.plugin.jdbc.JDBCCallActivity</pd:type>
            <pd:resourceType>ae.activities.JDBCCallActivity</pd:resourceType>
            <pd:x>99</pd:x>
            <pd:y>380</pd:y>
            <config>
                <timeout>%%Timeout%%</timeout>
                <maxRows>100</maxRows>
                <emptyStrAsNil>false</emptyStrAsNil>
                <jdbcSharedConfig>/Connection/Oracle BO Connection.sharedjdbc</jdbcSharedConfig>
                <ProcedureName>SND_BO_F</ProcedureName>
                <useSchema>false</useSchema>
                <schema>%%BO_Schema%%</schema>
                <oraObjects/>
                <oraTables/>
                <parameterTypes>
                    <parameter>
                        <colName>RETURN_VALUE</colName>
                        <colType>5</colType>
                        <dataType>2</dataType>
                        <typeName>NUMBER</typeName>
                    </parameter>
                    <parameter>
                        <colName>I_NBO</colName>
                        <colType>1</colType>
                        <dataType>2</dataType>
                        <typeName>NUMBER</typeName>
                    </parameter>
                    <parameter>
                        <colName>I_USR_CD</colName>
                        <colType>1</colType>
                        <dataType>2</dataType>
                        <typeName>NUMBER</typeName>
                    </parameter>
                    <parameter>
                        <colName>O_ERRTXT</colName>
                        <colType>2</colType>
                        <dataType>12</dataType>
                        <typeName>VARCHAR2</typeName>
                    </parameter>
                </parameterTypes>
            </config>
            <pd:inputBindings>
                <inputs>
                    <inputSet>
                        <I_NBO>
                            <xsl:choose>
                                <xsl:when test="exists($SndBoF-Mapping/resultSet/Record[$i]/i_nbo)">
                                    <xsl:value-of select="$SndBoF-Mapping/resultSet/Record[$i]/i_nbo"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </I_NBO>
                        <I_USR_CD>
                            <xsl:choose>
                                <xsl:when test="exists($SndBoF-Mapping/resultSet/Record[$i]/i_usr_cd)">
                                    <xsl:value-of select="$SndBoF-Mapping/resultSet/Record[$i]/i_usr_cd"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </I_USR_CD>
                        <O_ERRTXT xsi:nil="true"/>
                    </inputSet>
                </inputs>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="Generate-Error-5">
            <pd:type>com.tibco.pe.core.GenerateErrorActivity</pd:type>
            <pd:resourceType>ae.activities.throw</pd:resourceType>
            <pd:x>101</pd:x>
            <pd:y>480</pd:y>
            <config>
                <faultName/>
            </config>
            <pd:inputBindings>
                <ns1:ActivityInput>
                    <xsl:if test="not(($SndBoF/resultSet/outputSet/O_ERRTXT/@xsi:nil=(&quot;true&quot;)) or ($SndBoF/resultSet/outputSet/O_ERRTXT/@xsi:nil=(&quot;1&quot;)))">
                        <message>
                            <xsl:value-of select="$SndBoF/resultSet/outputSet/O_ERRTXT"/>
                        </message>
                    </xsl:if>
                    <xsl:if test="not(($SndBoF/resultSet/outputSet/RETURN_VALUE/@xsi:nil=(&quot;true&quot;)) or ($SndBoF/resultSet/outputSet/RETURN_VALUE/@xsi:nil=(&quot;1&quot;)))">
                        <messageCode>
                            <xsl:value-of select="$SndBoF/resultSet/outputSet/RETURN_VALUE"/>
                        </messageCode>
                    </xsl:if>
                </ns1:ActivityInput>
            </pd:inputBindings>
        </pd:activity>
    </pd:group>
    <pd:transition>
        <pd:from>Start</pd:from>
        <pd:to>Parse JSON</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Catch</pd:from>
        <pd:to>Render error JSON</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Render error JSON</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>SOAPRequestReply</pd:from>
        <pd:to>Render JSON</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Render JSON</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Get Deal</pd:from>
        <pd:to>Parse Deal JSON</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Parse Deal JSON</pd:from>
        <pd:to>Get Scala</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Get Scala</pd:from>
        <pd:to>Parse Scala JSON</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Parse Scala JSON</pd:from>
        <pd:to>Get HRMS EmpNo</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Parse Scala JSON</pd:from>
        <pd:to>Group</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>$Parse-Scala-JSON/ns:ActivityOutputClass/inputParams/underControl !=1</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>Group</pd:from>
        <pd:to>Get HRMS EmpNo</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Parse Deal JSON</pd:from>
        <pd:to>Generate Project Number Error</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>string-length($Parse-Deal-JSON/ns:ActivityOutputClass/opportunity/projectNumber)&lt;1</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>Parse Deal JSON</pd:from>
        <pd:to>Generate Scala Error</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>string-length($Parse-Deal-JSON/ns:ActivityOutputClass/opportunity/scalaID)&lt;1</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>Get HRMS EmpNo</pd:from>
        <pd:to>SOAPRequestReply</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Parse JSON</pd:from>
        <pd:to>SndBoF Mapping</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Iteration</pd:from>
        <pd:to>Get Deal</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>SndBoF Mapping</pd:from>
        <pd:to>Iteration</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
</pd:ProcessDefinition>