<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns="http://www.tibco.com/namespaces/tnt/plugins/json" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <pd:name>Processes/Deal/Search Deal (without procedure).process</pd:name>
    <pd:startName>Start</pd:startName>
    <pd:startType>
        <xsd:element name="inputParams">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element name="adLogin" type="xsd:string"/>
                    <xsd:element name="inputJSON" type="xsd:string"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:startType>
    <pd:startX>87</pd:startX>
    <pd:startY>63</pd:startY>
    <pd:returnBindings>
        <JSONoutput>
            <xsl:value-of select="if (count($Catch/exceptiondata)>0) then $Render-error-JSON/ns:ActivityOutputClass/jsonString  else &#xA;if (count($Render-JSON-empty-login/ns:ActivityOutputClass/jsonString)>0) then $Render-JSON-empty-login/ns:ActivityOutputClass/jsonString  else &#xA;$Render-JSON/ns:ActivityOutputClass/jsonString"/>
        </JSONoutput>
    </pd:returnBindings>
    <pd:endName>End</pd:endName>
    <pd:endType>
        <xsd:element name="JSONoutput" type="xsd:string"/>
    </pd:endType>
    <pd:endX>817</pd:endX>
    <pd:endY>183</pd:endY>
    <pd:errorSchemas/>
    <pd:processVariables/>
    <pd:targetNamespace>http://xmlns.example.com/1521575913877</pd:targetNamespace>
    <pd:activity name="Render JSON">
        <pd:type>com.tibco.plugin.json.activities.JSONRenderActivity</pd:type>
        <pd:resourceType>ae.activities.JSONRenderActivity</pd:resourceType>
        <pd:x>666</pd:x>
        <pd:y>180</pd:y>
        <config>
            <SchemaType>xsdType</SchemaType>
            <BadgerfishCheck>false</BadgerfishCheck>
            <removeRootElementForInput>true</removeRootElementForInput>
            <ActivityInputEditor>
                <xsd:element name="inputParams">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="currentPage" type="xsd:string"/>
                            <xsd:element name="pageSize" type="xsd:string"/>
                            <xsd:element name="lastPage" type="xsd:int"/>
                            <xsd:element name="lastRecord" type="xsd:long"/>
                            <xsd:element name="deals" minOccurs="0" maxOccurs="unbounded">
                                <xsd:complexType>
                                    <xsd:sequence>
                                        <xsd:element name="id" type="xsd:int"/>
                                        <xsd:element name="clientID" type="xsd:long" minOccurs="0"/>
                                        <xsd:element name="clientName" type="xsd:string" minOccurs="0"/>
                                        <xsd:element name="oppStatus" type="xsd:string" minOccurs="0"/>
                                        <xsd:element name="productList" type="xsd:string" minOccurs="0"/>
                                    </xsd:sequence>
                                </xsd:complexType>
                            </xsd:element>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </ActivityInputEditor>
        </config>
        <pd:inputBindings>
            <ns:ActivityInputClass>
                <inputParams>
                    <currentPage>
                        <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/currentPage"/>
                    </currentPage>
                    <pageSize>
                        <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/pageSize"/>
                    </pageSize>
                    <lastPage>
                        <xsl:value-of select="ceiling($Count-deals/resultSet/Record[1]/OutputColumn1 div $Parse-JSON/ns:ActivityOutputClass/Client/pageSize)"/>
                    </lastPage>
                    <lastRecord>
                        <xsl:value-of select="$Count-deals/resultSet/Record[1]/OutputColumn1"/>
                    </lastRecord>
                    <xsl:for-each select="$Select-deals/resultSet/Record">
                        <deals>
                            <id>
                                <xsl:value-of select="ID"/>
                            </id>
                            <xsl:if test="ClientID">
                                <clientID>
                                    <xsl:value-of select="ClientID"/>
                                </clientID>
                            </xsl:if>
                            <clientName>
                                <xsl:value-of select="ClientName"/>
                            </clientName>
                            <xsl:if test="OppStatus">
                                <oppStatus>
                                    <xsl:value-of select="OppStatus"/>
                                </oppStatus>
                            </xsl:if>
                            <productList>
                                <xsl:value-of select="ProductList"/>
                            </productList>
                        </deals>
                    </xsl:for-each>
                </inputParams>
            </ns:ActivityInputClass>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Parse JSON">
        <pd:type>com.tibco.plugin.json.activities.JSONParserActivity</pd:type>
        <pd:resourceType>ae.activities.JSONParserActivity</pd:resourceType>
        <pd:x>86</pd:x>
        <pd:y>179</pd:y>
        <config>
            <SchemaType>xsdType</SchemaType>
            <BadgerfishCheck>false</BadgerfishCheck>
            <ActivityOutputEditor>
                <xsd:element name="Client">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="mainSearch" type="xsd:string" minOccurs="0"/>
                            <xsd:element name="productSearch" type="xsd:string" minOccurs="0"/>
                            <xsd:element name="byProjectStatus" type="xsd:int" minOccurs="0"/>
                            <xsd:element name="byType1" type="xsd:string" minOccurs="0"/>
                            <xsd:element name="byType2" type="xsd:string" minOccurs="0"/>
                            <xsd:element name="byStatus" type="xsd:int" minOccurs="0"/>
                            <xsd:element name="byPeriod" type="xsd:long" minOccurs="0"/>
                            <xsd:element name="myDeal" type="xsd:int" minOccurs="0"/>
                            <xsd:element name="pageSize" type="xsd:int"/>
                            <xsd:element name="currentPage" type="xsd:int"/>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </ActivityOutputEditor>
        </config>
        <pd:inputBindings>
            <ns:ActivityInputClass>
                <jsonString>
                    <xsl:value-of select="$Start/inputParams/inputJSON"/>
                </jsonString>
            </ns:ActivityInputClass>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Catch">
        <pd:type>com.tibco.pe.core.CatchActivity</pd:type>
        <pd:resourceType>ae.activities.catch</pd:resourceType>
        <pd:x>485</pd:x>
        <pd:y>277</pd:y>
        <pd:handler>true</pd:handler>
        <config>
            <catchAll>true</catchAll>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="Render error JSON">
        <pd:type>com.tibco.plugin.json.activities.JSONRenderActivity</pd:type>
        <pd:resourceType>ae.activities.JSONRenderActivity</pd:resourceType>
        <pd:x>667</pd:x>
        <pd:y>276</pd:y>
        <config>
            <SchemaType>xsdType</SchemaType>
            <BadgerfishCheck>false</BadgerfishCheck>
            <removeRootElementForInput>true</removeRootElementForInput>
            <ActivityInputEditor>
                <xsd:element name="inputParams">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="opResult" type="xsd:int"/>
                            <xsd:element name="opErrorText" type="xsd:string"/>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </ActivityInputEditor>
        </config>
        <pd:inputBindings>
            <ns:ActivityInputClass>
                <inputParams>
                    <opResult>
                        <xsl:value-of select="2"/>
                    </opResult>
                    <opErrorText>
                        <xsl:value-of select="$Catch/exceptiondata/*"/>
                    </opErrorText>
                </inputParams>
            </ns:ActivityInputClass>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Render-JSON-empty-login">
        <pd:type>com.tibco.plugin.json.activities.JSONRenderActivity</pd:type>
        <pd:resourceType>ae.activities.JSONRenderActivity</pd:resourceType>
        <pd:x>454</pd:x>
        <pd:y>66</pd:y>
        <config>
            <SchemaType>xsdType</SchemaType>
            <BadgerfishCheck>false</BadgerfishCheck>
            <removeRootElementForInput>true</removeRootElementForInput>
            <ActivityInputEditor>
                <xsd:element name="output">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="opResult" type="xsd:int"/>
                            <xsd:element name="opErrorText" type="xsd:string"/>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </ActivityInputEditor>
        </config>
        <pd:inputBindings>
            <ns:ActivityInputClass>
                <output>
                    <opResult>
                        <xsl:value-of select="1"/>
                    </opResult>
                    <opErrorText>
                        <xsl:value-of select="'Не указан логин пользователя.'"/>
                    </opErrorText>
                </output>
            </ns:ActivityInputClass>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Select emplyoee id">
        <pd:type>com.tibco.plugin.jdbc.JDBCQueryActivity</pd:type>
        <pd:resourceType>ae.activities.JDBCQueryActivity</pd:resourceType>
        <pd:x>307</pd:x>
        <pd:y>180</pd:y>
        <config>
            <timeout>%%Timeout%%</timeout>
            <commit>false</commit>
            <maxRows>1</maxRows>
            <emptyStrAsNil>false</emptyStrAsNil>
            <jdbcSharedConfig>/Connection/MSSQL Connection (SF).sharedjdbc</jdbcSharedConfig>
            <statement>	select cast(u.SFEmployeeID as int) as employeeId from mrm.[Users] u 
		inner join dbo.Employee emp on u.SFEmployeeID = emp.employee_id
		 where u.LoginName = ?</statement>
            <wizardData/>
            <Prepared_Param_DataType>
                <parameter>
                    <parameterName>adLogin</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
            </Prepared_Param_DataType>
            <oraObjects/>
            <oraTables/>
            <QueryOutputCachedSchemaColumns>employeeId</QueryOutputCachedSchemaColumns>
            <QueryOutputCachedSchemaDataTypes>4</QueryOutputCachedSchemaDataTypes>
            <QueryOutputCachedSchemaDataTypesName>int</QueryOutputCachedSchemaDataTypesName>
            <QueryOutputCachedSchemaStatus>OptionalElement</QueryOutputCachedSchemaStatus>
        </config>
        <pd:inputBindings>
            <jdbcQueryActivityInput>
                <adLogin>
                    <xsl:value-of select="$Start/inputParams/adLogin"/>
                </adLogin>
            </jdbcQueryActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Select deals">
        <pd:type>com.tibco.plugin.jdbc.JDBCQueryActivity</pd:type>
        <pd:resourceType>ae.activities.JDBCQueryActivity</pd:resourceType>
        <pd:x>546</pd:x>
        <pd:y>179</pd:y>
        <config>
            <timeout>%%Timeout%%</timeout>
            <commit>false</commit>
            <maxRows>100</maxRows>
            <emptyStrAsNil>false</emptyStrAsNil>
            <statement>SELECT
  RowNum,
  ID,
  ClientID,
  ClientName,
  OppStatus,
  ProductList
FROM (
       SELECT
         ROW_NUMBER()
         OVER (
           ORDER BY opp.Opportunity_id DESC)                                    AS RowNum,
         cast(opp.Opportunity_id AS INT)                                        AS ID,
         cast(comp.COMPANY_ID AS INT)                                           AS ClientID,
         comp.company_name                                                      AS ClientName,
         CASE
         WHEN opp.Status = 0
           THEN 'В работе'
         WHEN opp.Status = 1
           THEN 'Приостановлена'
         WHEN opp.Status = 2
           THEN 'Закрыта'
         WHEN opp.Status = 3
           THEN 'Не реализована'
         WHEN opp.Status = 4
           THEN 'Заблокирована'
         ELSE NULL END                                                          AS OppStatus,
         STUFF((SELECT ', ' + cast(cast(sol.GT_SOLUTION_ID AS INT) AS VARCHAR) + ':' + sol.Special_Solution_Name
                FROM dbo.GT_Solution sol
                WHERE
                  sol.OPPORTUNITY_ID = opp.OPPORTUNITY_ID
                ORDER BY RN_CREATE_DATE DESC
                FOR XML PATH (''), TYPE).value('.', 'VARCHAR(8000)'), 1, 1, '') AS ProductList
       FROM dbo.Opportunity opp
         LEFT JOIN dbo.company comp ON opp.CUSTOMER_ID = comp.COMPANY_ID
       WHERE
         (--@mainSearch 7 times
           isnull(?, '') = ''
           OR
           (isnull(?, '') != '' AND
            (comp.COMPANY_NAME LIKE '%' + ? + '%'
             OR comp.INN LIKE '%' + ? + '%'
             OR comp.OGRN LIKE '%' + ? + '%'
             OR
             exists(SELECT 1
                    FROM dbo.SI_Contract
                    WHERE CUSTOMER_ID = comp.COMPANY_ID AND CONTRACT_NUMBER LIKE '%' + ? + '%')
             OR
             exists(SELECT 1
                    FROM dbo.SI_ScalaNumber
                    WHERE CUSTOMER_ID = comp.COMPANY_ID AND SCALA_NUMBER LIKE '%' + ? + '%')
            )
           )
         )
         AND
         (--@productSearch 3 times
           isnull(?, '') = ''
           OR
           (isnull(?, '') != '' AND
            exists(SELECT 1
                   FROM dbo.GT_Solution sol
                   WHERE sol.OPPORTUNITY_ID = opp.OPPORTUNITY_ID
                         AND (sol.Special_Solution_Name LIKE '%' + ? + '%')
            )
           )
         )
         AND
         (--@byProjectStatus 3 times
           ? IS NULL
           OR
           (? IS NOT NULL AND opp.Order_Status = ?)
         )
         AND
         (--@byType1 3 times
           ? IS NULL
           OR
           (isnull(?, '') != '' AND opp.mrm_Type1 = ?)
         )
         AND
         (--@byType2 3 times
           ? IS NULL
           OR
           (isnull(?, '') != '' AND opp.mrm_Type2 = ?)
         )
         AND
         (--@byStatus 3 times
           ? IS NULL
           OR
           (? IS NOT NULL AND opp.Status = ?)
         )
         AND
         (--@byPeriod 6 times
           ? IS NULL
           OR
           (? IS NOT NULL
            AND (
              ? = 0
              OR
              (? = 1 AND DATEDIFF(YEAR, opp.Rn_Create_Date, getdate()) BETWEEN 0 AND 365)
              OR
              (? = 2 AND DATEDIFF(QUARTER, opp.Rn_Create_Date, getdate()) = -1)
              OR
              (? = 3 AND DATEDIFF(DAY, opp.Rn_Create_Date, getdate()) BETWEEN 0 AND 90)
            )
           )
         )
         AND
         (--@myDeal 2 times
           isnull(?, 0) = 0
           OR
           (isnull(?, 0) != 0
            AND
            (--@Employee 3 times
              Exists(SELECT 1
                     FROM dbo.Employee
                     WHERE
                       Employee.Employee_Id = ?
                       AND (opp.Account_Manager_Id = Employee.Employee_Id
                            OR comp.ACCOUNT_MANAGER_ID = Employee.Employee_Id
                            OR comp.RN_CREATE_USER = Employee.RN_EMPLOYEE_USER_ID)
              )
              OR
              Exists(SELECT 1
                     FROM dbo.Employee emp
                     WHERE
                       opp.Account_Manager_Id = emp.Employee_Id AND
                       (
                         (emp.Assistant IS NOT NULL AND
                          EXISTS(SELECT 1
                                 FROM dbo.Employee assist
                                 WHERE
                                   assist.Employee_Id = emp.Assistant AND
                                   assist.Employee_Id = ?))
                         OR
                         EXISTS(SELECT 1
                                FROM dbo.Employee assist_f
                                WHERE
                                  assist_f.Assist_For = emp.Employee_Id AND
                                  assist_f.Employee_Id = ?)
                       )
              )
            )
           )
         )
     ) AS Results
WHERE RowNum BETWEEN ? AND ?</statement>
            <jdbcSharedConfig>/Connection/MSSQL Connection (SF).sharedjdbc</jdbcSharedConfig>
            <Prepared_Param_DataType>
                <parameter>
                    <parameterName>mainSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>mainSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>mainSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>mainSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>mainSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>mainSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>mainSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>productSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>productSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>productSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>byProjectStatus</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>byProjectStatus</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>byProjectStatus</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>byType1</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>byType1</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>byType1</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>byType2</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>byType2</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>byType2</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>byStatus</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>byStatus</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>byStatus</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>byPeriod</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>byPeriod</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>byPeriod</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>byPeriod</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>byPeriod</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>byPeriod</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>myDeal</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>myDeal</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>employeeId</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>employeeId</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>employeeId</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>startRow</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>endRow</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
            </Prepared_Param_DataType>
            <oraObjects/>
            <oraTables/>
            <QueryOutputCachedSchemaColumns>RowNum</QueryOutputCachedSchemaColumns>
            <QueryOutputCachedSchemaDataTypes>-5</QueryOutputCachedSchemaDataTypes>
            <QueryOutputCachedSchemaDataTypesName>bigint</QueryOutputCachedSchemaDataTypesName>
            <QueryOutputCachedSchemaStatus>OptionalElement</QueryOutputCachedSchemaStatus>
            <QueryOutputCachedSchemaColumns>ID</QueryOutputCachedSchemaColumns>
            <QueryOutputCachedSchemaDataTypes>4</QueryOutputCachedSchemaDataTypes>
            <QueryOutputCachedSchemaDataTypesName>int</QueryOutputCachedSchemaDataTypesName>
            <QueryOutputCachedSchemaStatus>OptionalElement</QueryOutputCachedSchemaStatus>
            <QueryOutputCachedSchemaColumns>ClientID</QueryOutputCachedSchemaColumns>
            <QueryOutputCachedSchemaDataTypes>4</QueryOutputCachedSchemaDataTypes>
            <QueryOutputCachedSchemaDataTypesName>int</QueryOutputCachedSchemaDataTypesName>
            <QueryOutputCachedSchemaStatus>OptionalElement</QueryOutputCachedSchemaStatus>
            <QueryOutputCachedSchemaColumns>ClientName</QueryOutputCachedSchemaColumns>
            <QueryOutputCachedSchemaDataTypes>12</QueryOutputCachedSchemaDataTypes>
            <QueryOutputCachedSchemaDataTypesName>varchar</QueryOutputCachedSchemaDataTypesName>
            <QueryOutputCachedSchemaStatus>OptionalElement</QueryOutputCachedSchemaStatus>
            <QueryOutputCachedSchemaColumns>OppStatus</QueryOutputCachedSchemaColumns>
            <QueryOutputCachedSchemaDataTypes>12</QueryOutputCachedSchemaDataTypes>
            <QueryOutputCachedSchemaDataTypesName>varchar</QueryOutputCachedSchemaDataTypesName>
            <QueryOutputCachedSchemaStatus>OptionalElement</QueryOutputCachedSchemaStatus>
            <QueryOutputCachedSchemaColumns>ProductList</QueryOutputCachedSchemaColumns>
            <QueryOutputCachedSchemaDataTypes>12</QueryOutputCachedSchemaDataTypes>
            <QueryOutputCachedSchemaDataTypesName>varchar</QueryOutputCachedSchemaDataTypesName>
            <QueryOutputCachedSchemaStatus>OptionalElement</QueryOutputCachedSchemaStatus>
        </config>
        <pd:inputBindings>
            <jdbcQueryActivityInput>
                <mainSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/mainSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/mainSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </mainSearch>
                <mainSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/mainSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/mainSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </mainSearch>
                <mainSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/mainSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/mainSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </mainSearch>
                <mainSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/mainSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/mainSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </mainSearch>
                <mainSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/mainSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/mainSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </mainSearch>
                <mainSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/mainSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/mainSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </mainSearch>
                <mainSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/mainSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/mainSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </mainSearch>
                <productSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/productSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/productSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </productSearch>
                <productSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/productSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/productSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </productSearch>
                <productSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/productSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/productSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </productSearch>
                <byProjectStatus>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/byProjectStatus)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/byProjectStatus"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </byProjectStatus>
                <byProjectStatus>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/byProjectStatus)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/byProjectStatus"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </byProjectStatus>
                <byProjectStatus>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/byProjectStatus)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/byProjectStatus"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </byProjectStatus>
                <byType1>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/byType1)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/byType1"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </byType1>
                <byType1>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/byType1)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/byType1"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </byType1>
                <byType1>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/byType1)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/byType1"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </byType1>
                <byType2>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/byType2)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/byType2"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </byType2>
                <byType2>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/byType2)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/byType2"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </byType2>
                <byType2>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/byType2)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/byType2"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </byType2>
                <byStatus>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/byStatus)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/byStatus"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </byStatus>
                <byStatus>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/byStatus)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/byStatus"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </byStatus>
                <byStatus>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/byStatus)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/byStatus"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </byStatus>
                <byPeriod>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/byPeriod)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/byPeriod"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </byPeriod>
                <byPeriod>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/byPeriod)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/byPeriod"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </byPeriod>
                <byPeriod>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/byPeriod)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/byPeriod"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </byPeriod>
                <byPeriod>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/byPeriod)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/byPeriod"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </byPeriod>
                <byPeriod>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/byPeriod)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/byPeriod"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </byPeriod>
                <byPeriod>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/byPeriod)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/byPeriod"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </byPeriod>
                <myDeal>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/myDeal)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/myDeal"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </myDeal>
                <myDeal>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/myDeal)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/myDeal"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </myDeal>
                <employeeId>
                    <xsl:choose>
                        <xsl:when test="exists($Select-emplyoee-id/resultSet/Record[1]/employeeId)">
                            <xsl:value-of select="$Select-emplyoee-id/resultSet/Record[1]/employeeId"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </employeeId>
                <employeeId>
                    <xsl:value-of select="$Select-emplyoee-id/resultSet/Record[1]/employeeId"/>
                </employeeId>
                <employeeId>
                    <xsl:value-of select="$Select-emplyoee-id/resultSet/Record[1]/employeeId"/>
                </employeeId>
                <startRow>
                    <xsl:value-of select="($Parse-JSON/ns:ActivityOutputClass/Client/currentPage - 1) * $Parse-JSON/ns:ActivityOutputClass/Client/pageSize + 1"/>
                </startRow>
                <endRow>
                    <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/pageSize * $Parse-JSON/ns:ActivityOutputClass/Client/currentPage"/>
                </endRow>
            </jdbcQueryActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Count deals">
        <pd:type>com.tibco.plugin.jdbc.JDBCQueryActivity</pd:type>
        <pd:resourceType>ae.activities.JDBCQueryActivity</pd:resourceType>
        <pd:x>435</pd:x>
        <pd:y>181</pd:y>
        <config>
            <timeout>%%Timeout%%</timeout>
            <commit>false</commit>
            <maxRows>100</maxRows>
            <emptyStrAsNil>false</emptyStrAsNil>
            <statement>SELECT count(*)
FROM dbo.Opportunity opp
  LEFT JOIN dbo.company comp ON opp.CUSTOMER_ID = comp.COMPANY_ID
WHERE
  (--@mainSearch 7 times
    isnull(?, '') = ''
    OR
    (isnull(?, '') != '' AND
     (comp.COMPANY_NAME LIKE '%' + ? + '%'
      OR comp.INN LIKE '%' + ? + '%'
      OR comp.OGRN LIKE '%' + ? + '%'
      OR
      exists(SELECT 1
             FROM dbo.SI_Contract
             WHERE CUSTOMER_ID = comp.COMPANY_ID AND CONTRACT_NUMBER LIKE '%' + ? + '%')
      OR
      exists(SELECT 1
             FROM dbo.SI_ScalaNumber
             WHERE CUSTOMER_ID = comp.COMPANY_ID AND SCALA_NUMBER LIKE '%' + ? + '%')
     )
    )
  )
  AND
  (--@productSearch 3 times
    isnull(?, '') = ''
    OR
    (isnull(?, '') != '' AND
     exists(SELECT 1
            FROM dbo.GT_Solution sol
            WHERE sol.OPPORTUNITY_ID = opp.OPPORTUNITY_ID
                  AND (sol.Special_Solution_Name LIKE '%' + ? + '%')
     )
    )
  )
  AND
  (--@byProjectStatus 3 times
    ? IS NULL
    OR
    (? IS NOT NULL AND opp.Order_Status = ?)
  )
  AND
  (--@byType1 3 times
    ? IS NULL
    OR
    (isnull(?, '') != '' AND opp.mrm_Type1 = ?)
  )
  AND
  (--@byType2 3 times
    ? IS NULL
    OR
    (isnull(?, '') != '' AND opp.mrm_Type2 = ?)
  )
  AND
  (--@byStatus 3 times
    ? IS NULL
    OR
    (? IS NOT NULL AND opp.Status = ?)
  )
  AND
  (--@byPeriod 6 times
    ? IS NULL
    OR
    (? IS NOT NULL
     AND (
       ? = 0
       OR
       (? = 1 AND DATEDIFF(YEAR, opp.Rn_Create_Date, getdate()) BETWEEN 0 AND 365)
       OR
       (? = 2 AND DATEDIFF(QUARTER, opp.Rn_Create_Date, getdate()) = -1)
       OR
       (? = 3 AND DATEDIFF(DAY, opp.Rn_Create_Date, getdate()) BETWEEN 0 AND 90)
     )
    )
  )
  AND
  (--@myDeal 2 times
    isnull(?, 0) = 0
    OR
    (isnull(?, 0) != 0
     AND
     (--@Employee 3 times
       Exists(SELECT 1
              FROM dbo.Employee
              WHERE
                Employee.Employee_Id = ?
                AND (opp.Account_Manager_Id = Employee.Employee_Id
                     OR comp.ACCOUNT_MANAGER_ID = Employee.Employee_Id
                     OR comp.RN_CREATE_USER = Employee.RN_EMPLOYEE_USER_ID)
       )
       OR
       Exists(SELECT 1
              FROM dbo.Employee emp
              WHERE
                opp.Account_Manager_Id = emp.Employee_Id AND
                (
                  (emp.Assistant IS NOT NULL AND
                   EXISTS(SELECT 1
                          FROM dbo.Employee assist
                          WHERE
                            assist.Employee_Id = emp.Assistant AND
                            assist.Employee_Id = ?))
                  OR
                  EXISTS(SELECT 1
                         FROM dbo.Employee assist_f
                         WHERE
                           assist_f.Assist_For = emp.Employee_Id AND
                           assist_f.Employee_Id = ?)
                )
       )
     )
    )
  )</statement>
            <jdbcSharedConfig>/Connection/MSSQL Connection (SF).sharedjdbc</jdbcSharedConfig>
            <Prepared_Param_DataType>
                <parameter>
                    <parameterName>mainSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>mainSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>mainSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>mainSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>mainSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>mainSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>mainSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>productSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>productSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>productSearch</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>byProjectStatus</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>byProjectStatus</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>byProjectStatus</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>byType1</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>byType1</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>byType1</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>byType2</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>byType2</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>byType2</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>byStatus</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>byStatus</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>byStatus</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>byPeriod</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>byPeriod</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>byPeriod</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>byPeriod</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>byPeriod</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>byPeriod</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>myDeal</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>myDeal</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>employeeId</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>employeeId</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>employeeId</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
            </Prepared_Param_DataType>
            <oraObjects/>
            <oraTables/>
            <QueryOutputCachedSchemaColumns>OutputColumn1</QueryOutputCachedSchemaColumns>
            <QueryOutputCachedSchemaDataTypes>4</QueryOutputCachedSchemaDataTypes>
            <QueryOutputCachedSchemaDataTypesName>int</QueryOutputCachedSchemaDataTypesName>
            <QueryOutputCachedSchemaStatus>OptionalElement</QueryOutputCachedSchemaStatus>
        </config>
        <pd:inputBindings>
            <jdbcQueryActivityInput>
                <mainSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/mainSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/mainSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </mainSearch>
                <mainSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/mainSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/mainSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </mainSearch>
                <mainSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/mainSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/mainSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </mainSearch>
                <mainSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/mainSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/mainSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </mainSearch>
                <mainSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/mainSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/mainSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </mainSearch>
                <mainSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/mainSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/mainSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </mainSearch>
                <mainSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/mainSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/mainSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </mainSearch>
                <productSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/productSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/productSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </productSearch>
                <productSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/productSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/productSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </productSearch>
                <productSearch>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/productSearch)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/productSearch"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </productSearch>
                <byProjectStatus>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/byProjectStatus)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/byProjectStatus"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </byProjectStatus>
                <byProjectStatus>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/byProjectStatus)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/byProjectStatus"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </byProjectStatus>
                <byProjectStatus>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/byProjectStatus)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/byProjectStatus"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </byProjectStatus>
                <byType1>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/byType1)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/byType1"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </byType1>
                <byType1>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/byType1)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/byType1"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </byType1>
                <byType1>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/byType1)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/byType1"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </byType1>
                <byType2>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/byType2)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/byType2"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </byType2>
                <byType2>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/byType2)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/byType2"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </byType2>
                <byType2>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/byType2)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/byType2"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </byType2>
                <byStatus>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/byStatus)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/byStatus"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </byStatus>
                <byStatus>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/byStatus)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/byStatus"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </byStatus>
                <byStatus>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/byStatus)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/byStatus"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </byStatus>
                <byPeriod>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/byPeriod)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/byPeriod"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </byPeriod>
                <byPeriod>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/byPeriod)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/byPeriod"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </byPeriod>
                <byPeriod>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/byPeriod)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/byPeriod"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </byPeriod>
                <byPeriod>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/byPeriod)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/byPeriod"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </byPeriod>
                <byPeriod>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/byPeriod)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/byPeriod"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </byPeriod>
                <byPeriod>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/byPeriod)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/byPeriod"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </byPeriod>
                <myDeal>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/myDeal)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/myDeal"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </myDeal>
                <myDeal>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-JSON/ns:ActivityOutputClass/Client/myDeal)">
                            <xsl:value-of select="$Parse-JSON/ns:ActivityOutputClass/Client/myDeal"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </myDeal>
                <employeeId>
                    <xsl:choose>
                        <xsl:when test="exists($Select-emplyoee-id/resultSet/Record[1]/employeeId)">
                            <xsl:value-of select="$Select-emplyoee-id/resultSet/Record[1]/employeeId"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </employeeId>
                <employeeId>
                    <xsl:value-of select="$Select-emplyoee-id/resultSet/Record[1]/employeeId"/>
                </employeeId>
                <employeeId>
                    <xsl:value-of select="$Select-emplyoee-id/resultSet/Record[1]/employeeId"/>
                </employeeId>
            </jdbcQueryActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:transition>
        <pd:from>Start</pd:from>
        <pd:to>Parse JSON</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Render JSON</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Catch</pd:from>
        <pd:to>Render error JSON</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Render error JSON</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Parse JSON</pd:from>
        <pd:to>Render-JSON-empty-login</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Parse JSON</pd:from>
        <pd:to>Select emplyoee id</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>string-length($Start/inputParams/adLogin) &gt; 0</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>Select deals</pd:from>
        <pd:to>Render JSON</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Select emplyoee id</pd:from>
        <pd:to>Count deals</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Count deals</pd:from>
        <pd:to>Select deals</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Render-JSON-empty-login</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
</pd:ProcessDefinition>